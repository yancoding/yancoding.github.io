<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>3d打印</title>
    <url>/posts/4d62933e0068/</url>
    <content><![CDATA[<h2 id="打印机型号"><a href="#打印机型号" class="headerlink" title="打印机型号"></a>打印机型号</h2><p>创想三维<br>ender3 v2</p>
<p>京东双十一价格大约在1300rmb</p>
<h2 id="如何快速进行预热"><a href="#如何快速进行预热" class="headerlink" title="如何快速进行预热"></a>如何快速进行预热</h2>]]></content>
      <tags>
        <tag>3d打印机</tag>
        <tag>树莓派</tag>
        <tag>octoprint</tag>
        <tag>uhubctl</tag>
      </tags>
  </entry>
  <entry>
    <title>Android手机作http代理服务器</title>
    <url>/posts/a9b098fb9eb3/</url>
    <content><![CDATA[<h2 id="一、前情"><a href="#一、前情" class="headerlink" title="一、前情"></a>一、前情</h2><p>为了可以上google，以前都是自己租vps搭ss，可是0202年确实太不稳定了，用不了几周就被ban了，还是去找些免费vpn吧，目前市面上里免费vpn最稳定的算<code>老王vpn</code>了，网速还是很不错的，可以满足日常使用，但是目前只有移动端，没有pc端，虽然可以通过移动端获取pc连线码，但是确实太麻烦了，而且在pc上的体验也原不如移动端<br>目前手里刚好有一个刚退休的android手机，没有坏，可以正常使用，那么如果用这部手机使用老王连上vpn，那么其他设备再通过这个手机上网不就可以上google了吗，嗯，确实可以，那就让手机做http代理服务器吧</p>
<h2 id="二、搭建http代理"><a href="#二、搭建http代理" class="headerlink" title="二、搭建http代理"></a>二、搭建http代理</h2><p>在网上查了下，想要用手机作为代理服务器大致有两种方式：</p>
<ul>
<li><p>通过termux在类linux环境使用python的proxy.py实现手机端代理（繁琐对个人技术要求高，且新版的proxy.py对移动端兼容不太好，不在使用这种方式）</p>
</li>
<li><p>通过<code>proxy server</code> app（简单易用）</p>
</li>
</ul>
<h3 id="1-安装proxy-server"><a href="#1-安装proxy-server" class="headerlink" title="1.安装proxy server"></a>1.安装proxy server</h3><p>在google play商店搜索 <code>proxy server</code>，即可安装</p>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>打开app，选择添加一个proxy server</p>
<img src="/posts/a9b098fb9eb3/%E6%88%AA%E5%B1%8F_20200809_140254.jpg" class="">

<p>在配置页，随便起个名字，在添加个端口号，返回确认保存即可</p>
<img src="/posts/a9b098fb9eb3/%E6%88%AA%E5%B1%8F_20200822_122904.jpg" class="">

<p>查看信息，这里可以看到手机端的ip地址</p>
<img src="/posts/a9b098fb9eb3/%E6%88%AA%E5%B1%8F_20200809_142726.jpg" class="">

<p>点击<code>start</code>按钮即可启动代理服务，底部可以查看服务日志</p>
<img src="/posts/a9b098fb9eb3/%E6%88%AA%E5%B1%8F_20200809_142735.jpg" class="">

<h2 id="三、连接服务"><a href="#三、连接服务" class="headerlink" title="三、连接服务"></a>三、连接服务</h2><h3 id="1-手动设置代理"><a href="#1-手动设置代理" class="headerlink" title="1.手动设置代理"></a>1.手动设置代理</h3><p>这里的手动设置代理是指自己指定固定的代理地址及端口号，只能指定一个代理服务</p>
<p>这是window10是下手动代理设置，输入手机端的ip及端口号，即可连接</p>
<img src="/posts/a9b098fb9eb3/2020-08-22_132246.jpg" class="">



<h3 id="2-使用代理脚本"><a href="#2-使用代理脚本" class="headerlink" title="2.使用代理脚本"></a>2.使用代理脚本</h3><p>手动设置代理会有一些局限性，所有的流量都会走我们的代理服务器，有时候我们并不想这样，可能只是google等国外的流量才是我们想代理的，国内的也走代理的话，那就绕远路了，使用代理脚本是可以有选择性的，我们可以指定访问哪些站点走代理，或是走不同的代理，通常是一个<code>pac</code>文件</p>
<p>如果想找到pac文件，可以在github上搜索pac文件的相关内容</p>
<p>我们可以在手机端启动一个http静态服务器，放置pac文件，以便于可以通过url访问到pac文件</p>
<p>然后在其他设备设置脚本代理，输入pac的地址</p>
<img src="/posts/a9b098fb9eb3/2020-08-22_134653.jpg" class="">
]]></content>
      <tags>
        <tag>http代理</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>BitLocker加密分区</title>
    <url>/posts/859f8fc33df4/</url>
    <content><![CDATA[<h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><p>打开磁盘管理</p>
<img src="/posts/859f8fc33df4/TIM%E6%88%AA%E5%9B%BE20190524094220.jpg" class="">

<p>对该分区进行<strong>压缩分区</strong></p>
<img src="/posts/859f8fc33df4/TIM%E6%88%AA%E5%9B%BE20190524094330.jpg" class="">

<p>可以将压缩分区量设置为 102400 即从当前分区压缩出 100G 的分区大小</p>
<img src="/posts/859f8fc33df4/TIM%E6%88%AA%E5%9B%BE20190524094426.jpg" class="">

<p>将这 100G 未分配分区<strong>添加简单券</strong></p>
<img src="/posts/859f8fc33df4/TIM%E6%88%AA%E5%9B%BE20190524094512.jpg" class="">

<p>到此，我们已经划分出了 100G 容量大小的可用分区</p>
<h2 id="对分区启用BitLocker加密"><a href="#对分区启用BitLocker加密" class="headerlink" title="对分区启用BitLocker加密"></a>对分区启用BitLocker加密</h2><p>右键 <strong>启用BitLocker</strong> </p>
<img src="/posts/859f8fc33df4/TIM%E6%88%AA%E5%9B%BE20190524094606.jpg" class="">

<p>设置好密码并保存好BitLocker恢复秘钥后，就可以点击 <strong>启动加密</strong> 对分区进行加密</p>
<img src="/posts/859f8fc33df4/TIM%E6%88%AA%E5%9B%BE20190524094706.jpg" class="">

<p>整个加密时间很长，这里 100G 的分区用了20min左右</p>
<img src="/posts/859f8fc33df4/TIM%E6%88%AA%E5%9B%BE20190524094850.jpg" class="">

<h2 id="锁定-BitLocker-分区"><a href="#锁定-BitLocker-分区" class="headerlink" title="锁定 BitLocker 分区"></a>锁定 BitLocker 分区</h2><h3 id="1-命令和批处理"><a href="#1-命令和批处理" class="headerlink" title="1.命令和批处理"></a>1.命令和批处理</h3><p>加密分区后，每次电脑开机再访问分区，都要输入一次密码，但是我们怎么锁定分区呢，这里默认是电脑关闭时会锁定BitLocker分区，但如果想立即锁定分区，防止其他人窥探呢</p>
<p>默认情况下电脑上并没有直接面向用户开启这个功能，但是可以通过命令行进行suoding</p>
<p><code>manage-bde -lock i:</code></p>
<p>这里的 <strong>i</strong> 是我们的卷标</p>
<p>每次输入命令进行锁定，实在是太麻烦里<br>这里我们可以用批处理，将该命令放到一个批处理文件里，需要锁定时，直接双击运行该批处理程序就好了</p>
<p>新建 <strong>记事本</strong>，粘贴下面的内容</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">title</span> 锁定加密分区i</span><br><span class="line">manage-bde -lock i:</span><br><span class="line"><span class="built_in">echo</span> 按任意键退出</span><br><span class="line"><span class="built_in">pause</span> &gt; <span class="built_in">NUL</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>选择另存为，设置编码方式为：<strong>ANSI</strong> 防止中文乱码</p>
<p>这时我们直接运行该批处理就可以锁定 分区i</p>
<h3 id="2-添加右键菜单"><a href="#2-添加右键菜单" class="headerlink" title="2.添加右键菜单"></a>2.添加右键菜单</h3><p>使用批处理看起来还是挺方便的，但是当我们不止一个加密分区，而是多个的时候，我们为了锁定多个分区，要分别设置批处理，这样就麻烦里些；如果是移动硬盘的话，这样更麻烦了，因为我们在挂在移动硬盘时并不知道他的盘符是几，编写固定的批处理文件这里就不适用了</p>
<p>终极解决办法是为磁盘驱动器添加右键菜单，这样我们只要右键菜单，点击锁定Bitlocker，即可锁定相应的分区</p>
<p>新建一个记事本，粘贴一下内容</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5</span>.<span class="number">00</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\runas]</span><br><span class="line">@=&quot;锁定 BitLocker&quot;</span><br><span class="line">&quot;AppliesTo&quot;=&quot;System.Volume.BitLockerProtection:=System.Volume.BitLockerProtection#On OR System.Volume.BitLockerProtection:=System.Volume.BitLockerProtection#Encrypting OR System.Volume.BitLockerProtection:=System.Volume.BitLockerProtection#Suspended) AND System.Volume.BitLockerCanChangePassphraseByProxy:=System.StructuredQueryType.Boolean#True&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;<span class="variable">%SystemRoot%</span>\\\\System32\\\\shell32.dll,<span class="number">47</span>&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\runas\command]</span><br><span class="line">@=&quot;<span class="built_in">cmd</span>  /v:on /k   <span class="built_in">set</span> bdestr=%<span class="number">1</span> &amp;&amp; <span class="built_in">set</span> bdedrv=<span class="variable">!bdestr:~0,2!</span> &amp;&amp; manage-bde.exe  -lock <span class="variable">!bdedrv!</span> -ForceDismount&amp; <span class="keyword">exit</span>&quot;</span><br></pre></td></tr></table></figure>
<p>保存为 <strong>.reg</strong> 文件</p>
<p>双击运行，会添加相应的注册表项</p>
<p>再次查看磁盘右键菜单，会发现多出一个菜单项 <strong>锁定 BitLocker</strong></p>
<img src="/posts/859f8fc33df4/2019-05-24_210854.png" class="">

<p>点击即可锁定相应的磁盘分区</p>
<p>参考文章：</p>
<ul>
<li><a href="http://www.xitonghe.com/jiaocheng/Windows10-7781.html">Win10系统右键菜单添加“手动BITLOCKER锁定加密”的方法</a></li>
<li><a href="https://www.winhelponline.com/blog/change-default-icon-file-type-windows/">How to Change the Icon for a File Type in Windows?</a></li>
<li><a href="https://help4windows.com/windows_7_shell32_dll.shtml">Windows 7 “shell32” Icons</a></li>
<li><a href="https://diymediahome.org/windows-icons-reference-list-with-details-locations-images/">Windows Icons: Full list with details, locations &amp; images</a></li>
</ul>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB笔记</title>
    <url>/posts/94d7489d7eb0/</url>
    <content><![CDATA[<h2 id="安装MongoDB服务"><a href="#安装MongoDB服务" class="headerlink" title="安装MongoDB服务"></a>安装MongoDB服务</h2><p>这里下载的时MongoDB 4 Windows社区版本，4之后的版本跟之前的有很大的不同，不需要自行指定数据库和日志目录了，这里安装过程只修改了安装目录，从默认的c盘自定义为d盘，其他均为默认选项，一并安装了compass，这里大多人都不推荐安装compass，说是会卡住，这里安装确实看起来像是卡住了，但就如安装信息说的这里可能需要 a few minutes，事实上这里安装进度不变保持了10分钟左右就安装好了，所以不用太担心，只是网络原因，假死而已</p>
<p>当然为了方便连接 MongoDB 实例，记得要将MongoDB安装目录下的bin目录添加到系统变量，这样我们就可以直接在shell 里直接输入 <code>mongo</code> 即可连接到MongoDB服务</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h2 id="mongo"><a href="#mongo" class="headerlink" title="mongo"></a>mongo</h2><p>连接到本地的 MongoDB 实例，使用默认服务端口 <code>27017</code></p>
<p>如果修改了本地 MongoDB 实例默认的服务端口，连接时我们也可以通过 <code>--port</code> 参数指定端口</p>
<p>例如</p>
<p><code>mongo --port 28015</code></p>
<h3 id="show-dbs"><a href="#show-dbs" class="headerlink" title="show dbs"></a>show dbs</h3><p>查看所有的数据库</p>
<h3 id="db"><a href="#db" class="headerlink" title="db"></a>db</h3><p>查看当前数据库</p>
<h3 id="use-DATABASE-NAME"><a href="#use-DATABASE-NAME" class="headerlink" title="use DATABASE_NAME"></a>use DATABASE_NAME</h3><p>切换数据库（不论存在与否）</p>
<h2 id="db-DATABASE-NAME-insert"><a href="#db-DATABASE-NAME-insert" class="headerlink" title="db.DATABASE_NAME.insert()"></a>db.DATABASE_NAME.insert()</h2><p>向 DATABASE_NAME 数据库插入数据</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.test.insert(&#123;&quot;description&quot;: &quot;这是一条测试数据&quot;&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong> 该命令不需要切换数据库</p>
<h3 id="db-dropDatabase"><a href="#db-dropDatabase" class="headerlink" title="db.dropDatabase()"></a>db.dropDatabase()</h3><p>删除当前数据库</p>
<h3 id="db-createCollection-name-options"><a href="#db-createCollection-name-options" class="headerlink" title="db.createCollection(name[,options])"></a>db.createCollection(name[,options])</h3><p>在当前数据库创建集合 COLLECTION_NAME</p>
<h3 id="db-COLLECTION-NAME-drop"><a href="#db-COLLECTION-NAME-drop" class="headerlink" title="db.COLLECTION_NAME.drop()"></a>db.COLLECTION_NAME.drop()</h3><p>在当前数据库删除集合 COLLECTION_NAME</p>
]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>centos 安装 nginx</title>
    <url>/posts/5e4523e458e0/</url>
    <content><![CDATA[<h2 id="1-系统版本"><a href="#1-系统版本" class="headerlink" title="1, 系统版本"></a>1, 系统版本</h2><p>当前安装的系统版本为：CentOS 7 x64 并且没有 SELinux</p>
<h2 id="2，安装"><a href="#2，安装" class="headerlink" title="2，安装"></a>2，安装</h2><p>安装过程来自nginx官方的安装介绍</p>
<p>需要先安装 yum-utils</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install yum-utils</span><br></pre></td></tr></table></figure>

<p>然后添加 nginx 的 yum 仓库<br>在<code>/etc/yum.repos.d/</code>下新建文件<code>nginx</code></p>
<p>保存一下内容</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br></pre></td></tr></table></figure>

<p>安装nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure>

<p>到此nginx安装完毕</p>
<h2 id="关于配置"><a href="#关于配置" class="headerlink" title="关于配置"></a>关于配置</h2><p>nginx默认是监听80端口的</p>
<p>这是如果防火墙没有开放相应端口的话，是无法进行外网访问的</p>
<p>查看所有打开的端口： <code>firewall-cmd --zone=public --list-ports</code></p>
<p>打开80端口 <code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code></p>
<p>之后便可以在外网访问到nginx的欢迎界面了</p>
<p>注：在本系统内，nginx的配置文件目录在： &#x2F;etc&#x2F;nginx；静态资源目录：&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;</p>
<p>参考文章</p>
<ul>
<li><a href="http://nginx.org/en/linux_packages.html#RHEL-CentOS">Installation instructions</a></li>
<li><a href="https://blog.csdn.net/s_p_j/article/details/80979450">CentOS7使用firewall-cmd打开关闭防火墙与端口</a></li>
</ul>
]]></content>
      <tags>
        <tag>centos</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>centos安装socks5服务</title>
    <url>/posts/64869040abc0/</url>
    <content><![CDATA[<h2 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ automake make pam-devel openldap-deve</span><br></pre></td></tr></table></figure>

<h2 id="2-安装socks5"><a href="#2-安装socks5" class="headerlink" title="2.安装socks5"></a>2.安装socks5</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://jaist.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf ss5-3.8.9-8.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ss5-3.8.9</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h2 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3.启动服务"></a>3.启动服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service ss5 start</span><br></pre></td></tr></table></figure>

<p>echo “env: &#x2F;etc&#x2F;init.d&#x2F;ss5: Permission denied”</p>
<p>修改权限后再次启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod a+x /etc/init.d/ss5</span><br><span class="line">service ss5 start</span><br></pre></td></tr></table></figure>

<p>此时服务已启动，但还不能正常使用，需要进行服务配置</p>
<h2 id="4-服务配置"><a href="#4-服务配置" class="headerlink" title="4.服务配置"></a>4.服务配置</h2><p>找到 <code>auth</code> 和 <code>permit</code>, 取消注释，如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">///////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      SHost           SPort           Authentication</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">auth    0.0.0.0/0               -               -</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">     Auth     SHost           SPort   DHost           DPort   Fixup   Group   Band    ExpDate</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">permit -        0.0.0.0/0       -       0.0.0.0/0       -       -       -       -       -</span></span><br></pre></td></tr></table></figure>

<p>重启服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service ss5 restart</span><br></pre></td></tr></table></figure>

<p>socks5默认服务端口为<code>1080</code>, 查看系统端口列表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>

<p>如果还没有开启, 则开启1080端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=1080/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>至此，服务已可以连接，任何用户均可连接</p>
<h2 id="5-配置用户"><a href="#5-配置用户" class="headerlink" title="5.配置用户"></a>5.配置用户</h2><p>编辑</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/opt/ss5/ss5.conf</span><br></pre></td></tr></table></figure>

<p>找到 <code>auth</code> 和 <code>permit</code>, 修改如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">///////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      SHost           SPort           Authentication</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">auth    0.0.0.0/0               -               u</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">     Auth     SHost           SPort   DHost           DPort   Fixup   Group   Band    ExpDate</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">permit u        0.0.0.0/0       -       0.0.0.0/0       -       -       -       -       -</span></span><br></pre></td></tr></table></figure>

<p>编辑</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/opt/ss5/ss5.passwd</span><br></pre></td></tr></table></figure>

<p>添加一行用户，账户与密码空格隔开</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">username password</span><br></pre></td></tr></table></figure>

<p>重启服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service ss5 restart</span><br></pre></td></tr></table></figure>

<p>此时在连接代理服务则需要账户密码才可连接成功</p>
<p>参考文章</p>
<ul>
<li><a href="https://blog.csdn.net/zjiang1994/article/details/74925039">CentOS7 配置SOCKS5代理服务</a></li>
</ul>
]]></content>
      <tags>
        <tag>cenos7</tag>
        <tag>socks5</tag>
      </tags>
  </entry>
  <entry>
    <title>css transition</title>
    <url>/posts/9c8b3e3e2c47/</url>
    <content><![CDATA[<h1 id="css-transition"><a href="#css-transition" class="headerlink" title="css transition"></a>css transition</h1><h2 id="ease与ease-in-out的区别"><a href="#ease与ease-in-out的区别" class="headerlink" title="ease与ease-in-out的区别"></a>ease与ease-in-out的区别</h2><p>两者的整体效果都是缓入缓出，只是细节上存在差异</p>
<table>
<thead>
<tr>
<th></th>
<th>贝塞尔曲线</th>
</tr>
</thead>
<tbody><tr>
<td>ease</td>
<td>cubic-bezier(0.25, 0.1, 0.25,1)</td>
</tr>
<tr>
<td>ease-in-out</td>
<td>cubic-bezier(0.42, 0, 0.58, 1)</td>
</tr>
</tbody></table>
<p>比较两者的贝塞尔曲线，ease缓入效果较其缓出效果不明显；ease-in-out缓入缓出效果都比价明显</p>
<h2 id="step-start-和step-end"><a href="#step-start-和step-end" class="headerlink" title="step-start 和step-end"></a>step-start 和step-end</h2><p>step-start 等同于 steps(1, start), 过渡效果分一步完成，在步的起始开始，即直接过渡到效果</p>
<p>step-end 等同于 steps(1, end)， 过渡效果分一步完成，在步的结束开始，即transition-duration之后完成过渡效果</p>
<h2 id="steps"><a href="#steps" class="headerlink" title="steps()"></a>steps()</h2><p>语法：steps(&lt; integer &gt;[, [ start | end ] ]?)</p>
<p>过渡步数为整数，第二个参数默认值为 end</p>
<p>start：表示过渡从第一步时间的开始开始(会直接看到过渡效果)</p>
<p>end：表示过渡从第一步时间的结束开始(不会直接看到过渡效果)</p>
<p><strong>注意：</strong> transition-delay 将包含于步进函数的第一步，即第一步的持续时间为均分时间加上延迟时间</p>
]]></content>
  </entry>
  <entry>
    <title>SEO优化学习笔记</title>
    <url>/posts/0efe0a32e8cd/</url>
    <content><![CDATA[<h2 id="SEO与SEM的区别"><a href="#SEO与SEM的区别" class="headerlink" title="SEO与SEM的区别"></a>SEO与SEM的区别</h2><p>SEO (Search Engine Optimization 搜索引擎优化)<br>SEM (Search Engine Marketing 搜索引擎营销)</p>
<p>SEO 通过免费的方式提高网站排名<br>SEM 通过向搜索引擎付费的方式来提高网站的排名</p>
<h2 id="SEO与SEM的对比"><a href="#SEO与SEM的对比" class="headerlink" title="SEO与SEM的对比"></a>SEO与SEM的对比</h2><p>SEO投入较低，SEM投入较高</p>
<p>SEO短期投入，效益快；SEM长期投入，增长慢</p>
<p>新广告法对搜索引擎广告位做了一定的限制，广告位减少，SEM投入，竞争加大；SEO有了更大的效用空间</p>
<h2 id="IP、PV、UV"><a href="#IP、PV、UV" class="headerlink" title="IP、PV、UV"></a>IP、PV、UV</h2><p>IP ：独立IP访问的用户数(一个家庭或公司使用一个IP访问该网站，只能计作一个IP)</p>
<p>PV ：页面浏览量或点击量(刷新页面也统计在内)</p>
<p>UV ：独立访客数(不同的设备都会统计在内)</p>
<h2 id="搜索引擎的发展历史"><a href="#搜索引擎的发展历史" class="headerlink" title="搜索引擎的发展历史"></a>搜索引擎的发展历史</h2><p>搜索引擎的前身是导航网址(导航网址所能容纳的链接有限，互联网高速发展，网站也越来越多，搜索引擎应运而生)</p>
<p>早期的搜索引擎有：1995年大卫·费罗和美籍华人杨致远创建了全球第一家因特网导航服务网站雅虎；之后的1998年谷歌成立；2000年从硅谷回来的李彦宏创办了百度</p>
<p>搜索引擎占有率: <a href="http://gs.statcounter.com/search-engine-market-share">http://gs.statcounter.com/search-engine-market-share</a></p>
<h2 id="SEO的排名机制"><a href="#SEO的排名机制" class="headerlink" title="SEO的排名机制"></a>SEO的排名机制</h2><p>搜索引擎通过蜘蛛爬取网站内容，再将内容分类后存储再数据库中，所以通过搜索引擎显示的搜索内容并不一定是最新的，会有一定的时间间隔</p>
<p>搜索引擎会通过算法评估网站内容质量，并给网站分配不同的权重，权重越高，蜘蛛抓取网站内容的频率越高，排名越靠前</p>
<h2 id="搜索引擎提交入口"><a href="#搜索引擎提交入口" class="headerlink" title="搜索引擎提交入口"></a>搜索引擎提交入口</h2><p>百度搜索网站提交入口</p>
<p>Google搜索网站提交入口</p>
<p>360搜索网站提交入口</p>
<p>搜狗搜索网站提交入口</p>
<p>必应搜索网站提交入口</p>
<h2 id="SEO优化的最重要的三个要素"><a href="#SEO优化的最重要的三个要素" class="headerlink" title="SEO优化的最重要的三个要素"></a>SEO优化的最重要的三个要素</h2><p>标题</p>
<p>关键字</p>
<p>描述</p>
<h2 id="外链与内链"><a href="#外链与内链" class="headerlink" title="外链与内链"></a>外链与内链</h2><p>外链是指网站与网站之间的链接(例如友情链接，与权重较高的网站交换友情链接有助于提高自身的权重)</p>
<p>友情链接交换的注意事项：<br>1.要和内容相近的网站进行交换<br>2.外链分为单向外链和双向外链(单向外链若指向自己的网站，则爬虫单向进入自己的网站，不会反回，更有利于抓取自己的网站，提高权重；双向外链则双方共同成长，一同进步)<br>3.灌水式外链：在各大论坛发布的内容中植入自己的网站链接(单向外链，损人利己者)，是一种不友好的SEO优化方式</p>
<p>内链是指网站内的链接</p>
<p>内链有助于提高搜索引擎对网站各页面的抓取率</p>
<h2 id="内容质量"><a href="#内容质量" class="headerlink" title="内容质量"></a>内容质量</h2><p>1.更新(不断地更新网站内容有助于搜索引擎的抓取，如果一个网站更新较少或不再更新内容，搜索引擎便会减少抓取频率)</p>
<p>2.质量(网站的内容质量越高，搜索引擎的抓取频率也会越高)</p>
<p>3.原创(搜索引擎会对抓取的内容进行比对、查重，如果网站内容原创内容较少，或只是一些伪原创，则搜索引擎会降低对该网站的抓取频率，降低权重)</p>
<p>4.关键词密度(2% ~ 8%)不要关键词堆砌</p>
<h2 id="黑帽与沙盒"><a href="#黑帽与沙盒" class="headerlink" title="黑帽与沙盒"></a>黑帽与沙盒</h2><p>黑帽是指采用一些作弊或违规的手段来优化网站的SEO</p>
<img src="/posts/0efe0a32e8cd/%E9%BB%91%E5%B8%BDSEO.jpg" class="">
<p>搜索引擎会对一些采用黑帽手段来提升网站权重，增加效益的网站进行惩罚，列入黑名单，降低权重，减少抓取或不在抓取，不再显示在搜索页面，称之为网站被放入了沙盒</p>
<h2 id="话术设置"><a href="#话术设置" class="headerlink" title="话术设置"></a>话术设置</h2><p>好的话术会吸引更多的点击量，特别是对内容的标题和描述，但不要只为了点击量而故意更改标题，而使文题不符，会使读者产生一种欺骗感，会加大读者对网站的反感 (而自媒体的快速发展，每个人都可以在网上发布内容，成为“小编”，但也有内容较差，并带有欺诈性质标题的自媒体存在，当然这些并不会长存)</p>
<h2 id="关键词的挖掘"><a href="#关键词的挖掘" class="headerlink" title="关键词的挖掘"></a>关键词的挖掘</h2><p>1.头脑风暴(集思广益)</p>
<p>2.利用搜索引擎相关搜索(可以通过相关搜索查看排名靠前的网站关键词，来优化自己网站的关键词，还有下方的相关搜索项)</p>
<p>3.利用工具(例如:百度指数<a href="http://index.baidu.com/%E6%9F%A5%E7%9C%8B%E7%9B%B8%E5%85%B3%E5%85%B3%E9%94%AE%E8%AF%8D%E7%9A%84%E6%90%9C%E7%B4%A2%E9%A2%91%E7%8E%87">http://index.baidu.com/查看相关关键词的搜索频率</a>)</p>
<p>4.利用长尾关键词(在有相同关键词时，搜索引擎会最先显示权重较高的网站，对于权重较低的网站想要在搜索页面排名靠前，与权重较高的网站使用相同的关键词并不占优势，这时我们可以使用长尾关键词。长尾关键词搜索率并不稳定，但更有目的性，一旦用户进行了长尾关键词的搜索，那我们的网站将会排名靠前，优先显示，前期网站可采用长尾关键词来引入流量，提高权重，当我们的网站权重已经较高时，我们便可以使用搜索频率较高的短关键词与同类网站竞争)</p>
<h2 id="选择域名"><a href="#选择域名" class="headerlink" title="选择域名"></a>选择域名</h2><p>1.后缀的选择<br>.com(公司或商业组织)<br>.top(国际通用的顶级域名)<br>.org(非盈利的组织)<br>.gov(政府部门)<br>.edu(教育组织)<br>.net(网络服务提供商) </p>
<p>2.短域名(更易记忆)</p>
<p>3.语义(易于联想记忆)</p>
<p>4.域名的历史使用记录(不要使用有不良记录的域名，会影响网站的后期发展，可以先在搜索引擎中搜索域名，查看是否有不良内容)</p>
<h2 id="服务器的选择"><a href="#服务器的选择" class="headerlink" title="服务器的选择"></a>服务器的选择</h2><p>1.要响应速度快</p>
<p>2.要稳定</p>
<h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p>1.代码去冗余(减少冗余代码、代码精简化、模块化)</p>
<p>2.自动化(工具：grunt、gulp、webPack、tinyPNG…)</p>
<p>3.语义化</p>
<h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p>1.200 (2开头的表示网页响应成功)</p>
<p>2.300 (302、304表示重定向)</p>
<p>3.404 (网页不存在)</p>
<p>4.500 (5、6开头的表示服务器错误)</p>
<h2 id="站群模式"><a href="#站群模式" class="headerlink" title="站群模式"></a>站群模式</h2><p>例如淘宝客、镜像网站(共享流量)</p>
<h2 id="其他的一些优化手段"><a href="#其他的一些优化手段" class="headerlink" title="其他的一些优化手段"></a>其他的一些优化手段</h2><p>1.提升客户体验 (易用性、UI优化等等)</p>
<p>2.内容形式的多样性 (视频，社区)</p>
<p>3.代码属性的优化 (alt:简介；title；logo等)</p>
<p>4.相关搜索引擎的产品的协助 (例如文库、问答等这些网站具有很高的权重，植入的单向外链会带来很大的流量)</p>
<h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><p>1.每个搜索引擎的总体取量</p>
<p>2.记录搜索引擎蜘蛛的不重复取量</p>
<p>3.每个目录、每个搜索引擎的抓取量</p>
<p>4.统计搜索引擎抓取的状态码</p>
<p>5.统计搜索引擎抓取的次数，时间</p>
<h2 id="统计工具"><a href="#统计工具" class="headerlink" title="统计工具"></a>统计工具</h2><p>1.CNZZ</p>
<p>2.爱站网<a href="https://www.aizhan.com/%E3%80%81%E7%AB%99%E9%95%BF%E5%B7%A5%E5%85%B7http://tool.chinaz.com/">https://www.aizhan.com/、站长工具http://tool.chinaz.com/</a></p>
]]></content>
      <tags>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>frp反向代理</title>
    <url>/posts/1f5dbaa397e3/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>git基本用法</title>
    <url>/posts/cc4fed488750/</url>
    <content><![CDATA[<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h3 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h3><p>在git官网下载安装即可</p>
<h3 id="Mac-os系统"><a href="#Mac-os系统" class="headerlink" title="Mac os系统"></a>Mac os系统</h3><p>没用过，不知道</p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="Debian或Ubuntu"><a href="#Debian或Ubuntu" class="headerlink" title="Debian或Ubuntu"></a>Debian或Ubuntu</h4><p><code>sudo apt-get install git</code></p>
<h4 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h4><p><code>yum install git</code></p>
<h2 id="配置–告诉git你是谁"><a href="#配置–告诉git你是谁" class="headerlink" title="配置–告诉git你是谁"></a>配置–告诉git你是谁</h2><p>在进行commit提交操作时，git需要知道你是谁</p>
<p>全局配置</p>
<p><code>git config --global user.name &#39;Your name&#39;</code></p>
<p><code>git config --global user.email &#39;email@example.com&#39;</code></p>
<p>局部配置</p>
<p><code>git config user.name &#39;Your name&#39;</code></p>
<p><code>git config user.email &#39;email@example.com&#39;</code></p>
<p>读取相应配置</p>
<p><code>git config user.name</code></p>
<p><code>git config user.email</code></p>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>在目录下进行git初始化，即可在该目录下创建一个仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> learngit</span><br><span class="line"><span class="built_in">cd</span> learngit</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>通过 <code>ls -ah</code> 列出所有的隐藏文件，会发现该目录下新增了 <code>.git</code> 目录</p>
<h2 id="git-status-命令"><a href="#git-status-命令" class="headerlink" title="git status 命令"></a><code>git status</code> 命令</h2><p>该命令将显示仓库的当前状态,包括工作区的修改状态和暂存区的提交状态</p>
<h2 id="git-add-命令"><a href="#git-add-命令" class="headerlink" title="git add 命令"></a><code>git add</code> 命令</h2><p>该命令用于将<strong>工作区</strong>的内容添加到<strong>暂存区</strong></p>
<p>例如我们在工作区新建了一个learngit.txt, 我们可以把它添加到<strong>暂存区</strong></p>
<p><code>touch learngit.txt</code></p>
<p><code>git add learngit.txt</code></p>
<p><strong><code>git add -u</code> 与 <code>git add -A</code></strong></p>
<p><code>git add -u</code> 是 <code>git add --update</code> 的简写，意为更新<strong>暂存区</strong>，只有被添加到<strong>暂存区</strong>的文件才会被更新<br><code>git add -A</code> 是 <code>git add --all</code> 的简写，意为添加所有修改到<strong>暂存区</strong>，git中的修改包括了文件的新建，删除和文件内容改变(不论之前是否添加到暂存区)</p>
<h2 id="git-commit-命令"><a href="#git-commit-命令" class="headerlink" title="git commit 命令"></a><code>git commit</code> 命令</h2><p>该命令用于将<strong>暂存区</strong>的内容提交到<strong>仓库</strong></p>
<p>通过 <code>git add</code> 命令我们已经在<strong>暂存区</strong>添加了 learngit.txt 文件，这时我们可以将其提交到仓库</p>
<p><code>git commit -m &#39;增添了learngit.txt&#39;</code></p>
<p>这样我们附带了一行提交信息，如果我们想附带多行的提交信息，可以直接执行</p>
<p><code>git commit</code></p>
<p>该条命令会打开编辑器，可以在编辑器里输入多行提交信息</p>
<img src="/posts/cc4fed488750/bVSVwj.webp" class="">

<p>上图摘自: <a href="https://segmentfault.com/q/1010000010668517/">git commit –amend之后出现的填写提交message的界面，之后要怎么操作？</a></p>
<p>每次进行commit提交操作时，最好带上提交信息，便于我们日后查询每个提交主要进行了什么内容的更改</p>
<p>该命令会将<strong>暂存区</strong>的所有内容提交到<strong>仓库</strong></p>
<h2 id="git-diff-命令"><a href="#git-diff-命令" class="headerlink" title="git diff 命令"></a><code>git diff</code> 命令</h2><p>该命令用于查看<strong>工作区</strong>相对于<strong>暂存区</strong>或<strong>版本库</strong>的具体修改内容</p>
<p>当暂存区不为空时，与 暂存区 比对<br>当暂存区为空时，与 版本库 比对</p>
<p>当我们的 暂存区 不为空，而我们又想查看 工作区 与 版本库 的区别，可以用以下命令，指定与当前版本库对比</p>
<p><code>git diff HEAD --</code></p>
<h2 id="git-log-命令"><a href="#git-log-命令" class="headerlink" title="git log 命令"></a><code>git log</code> 命令</h2><p>查看git的日志记录，其中保存着提交信息</p>
<p>当版本信息较多时，我们可以选择显示简略信息，每条显示在一行上</p>
<p><code>git log --pretty=oneline</code></p>
<h2 id="git-reset-命令"><a href="#git-reset-命令" class="headerlink" title="git reset 命令"></a><code>git reset</code> 命令</h2><p>该命令有三种模式 <code>--mixed</code> <code>--soft</code> <code>--hard</code>,默认为 <code>--mixed</code> 模式</p>
<ol>
<li><code>--mixed</code> 模式</li>
</ol>
<p>在没有指定要回退的版本时，<code>git reset</code> 命令会丢弃暂存区的内容，而工作区和版本库不发生改变</p>
<p>在指定要回退到某一版本时，<code>git reset HEAD^</code> 命令</p>
<p><code>git reset --hard HEAD^</code></p>
<p><strong>HEAD</strong> 表示当前版本，<strong>HEAD^</strong> 表示上一个版本，<strong>HEAD^^</strong> 表示上上个版本，也可用<strong>HEAD~1</strong> 表示上一个版本，<strong>HEAD~2</strong> 表示上上个版本</p>
<p>除了使用相对版本位置进行回退，我们还可以指定版本号进行回退</p>
<p><code>git reset --hard 0010a</code></p>
<p>此处的 0010a 是我们要回退到的版本id的前几位</p>
<p>回退到当前版本，暂存区的修改将放回工作区</p>
<p><code>git reset HEAD</code></p>
<h2 id="git-reflog-命令"><a href="#git-reflog-命令" class="headerlink" title="git reflog 命令"></a><code>git reflog</code> 命令</h2><p>该命令可以产看历史版本记录</p>
<h2 id="git-checkout-命令"><a href="#git-checkout-命令" class="headerlink" title="git checkout 命令"></a><code>git checkout</code> 命令</h2><p>该命令用于丢弃<strong>工作区</strong>的修改,如果已添加到工作区，则是相对于工作取的修改，否则是相对于当前HEAD版本的修改</p>
<h2 id="git-rm-命令"><a href="#git-rm-命令" class="headerlink" title="git rm 命令"></a><code>git rm</code> 命令</h2><p>该命令用于删除暂存区或版本的文件，与 <code>git add</code> 相对应</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo创建自定义页面</title>
    <url>/posts/f0868a08b5ff/</url>
    <content><![CDATA[<h2 id="为什么要在-hexo-中使用自定义页面"><a href="#为什么要在-hexo-中使用自定义页面" class="headerlink" title="为什么要在 hexo 中使用自定义页面"></a>为什么要在 hexo 中使用自定义页面</h2><p>在hexo中我们并不是只是用来写文字文章，有时我们也想自定义一些页面，这些页面是完全独立于主题样式的，比如在hexo中放上自己用html写的个人简历，又或是自己的一些前端Demo。</p>
<h2 id="如何设置自定义页面"><a href="#如何设置自定义页面" class="headerlink" title="如何设置自定义页面"></a>如何设置自定义页面</h2><p>默认情况下source目录下的post, page等都会进行主题模板的渲染，生成相应的静态页面，但hexo中也提供了相应的配置，阻止模板渲染，实现自定义页面</p>
<p>这里我们想放上我们的静态Demo，这里我们先新建一个页面用来存放我们的demo list</p>
<p><code>hexo new page &#39;demo&#39;</code></p>
<p>新建后，source目录下添加了一个demo目录，demo目录下还有一个index目录和index.md文件，我将index目录名命名为list，用来存放我的demos，index.md用来存放相应的demo链接。</p>
<h3 id="1-通过-layout-false"><a href="#1-通过-layout-false" class="headerlink" title="1.通过 layout: false"></a>1.通过 <strong>layout: false</strong></h3><p>如果我们想让index.html变成独立页面，我们只需在文件的头部添加一下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>然后这个页面在 <code>hexo generate</code> 时变不会进行渲染，而是直接移动到public 目录下</p>
<p>这个方法有一定的局限性，页面过多时就不太适合了，每个都添加也不现实</p>
<h3 id="2-通过-skip-render"><a href="#2-通过-skip-render" class="headerlink" title="2.通过 skip_render"></a>2.通过 <strong>skip_render</strong></h3><p>通过配置文件 <strong>_config.yml</strong> 的 <strong>skip_render</strong> 选项</p>
<p>例如我们想要跳过source&#x2F;demo&#x2F;list目录下的所有文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">skip_render: demo/list/*</span><br></pre></td></tr></table></figure>

<p>如果想要跳过source&#x2F;demo&#x2F;list目录下的所有文件及其子文件夹的所有文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">skip_render: demo/list/**</span><br></pre></td></tr></table></figure>

<p>当然也可以指定某一文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">skip_render: demo/list/test.html</span><br></pre></td></tr></table></figure>

<p>多个指定文件或路径时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">skip_render: </span><br><span class="line">- demo/list/test.html</span><br><span class="line">- demo/list/demo1/**</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong> 修改配置文件后，并不会立即生效，需要重启服务，重新生成静态页面才行</p>
<p>参考资料：</p>
<ul>
<li><a href="http://blog.fangchengjin.cn/hexo-custom-page.html">Hexo博客跳过渲染，创建自定义网页</a></li>
<li><a href="http://xchb.work/2017/04/08/hexo%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6-skip-render-%E9%85%8D%E7%BD%AE/">hexo忽略文件(skip_render)配置</a></li>
<li><a href="https://hexo.io/docs/configuration#Directory">hexo文档-Configuration</a></li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo粘贴图片</title>
    <url>/posts/060385f8b5eb/</url>
    <content><![CDATA[<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>用hexo写文章的时候，如果都是纯文字的内容，那么我们可以一直专注于码字，但是如果想插入图片素材呢，就需要先把图片存到文章的资源目录，然后再在文章中进行引用，其实这个过程是非常繁琐的，特别是要插入较多图片时，那如果可以直接再编辑器里粘贴图片，这个过程就极大的简化了</p>
<h2 id="Paste-Image"><a href="#Paste-Image" class="headerlink" title="Paste Image"></a>Paste Image</h2><p>vscode编辑器中的插件是非常丰富的，当你使用过程中，感觉有不方便的地方，一般都会有对应的结局方案</p>
<p>想要在编辑器中粘贴图片，那直接在vscode的扩展商店里搜索 <code>paste image</code>, 就可以找到想要的插件</p>
<img src="/posts/060385f8b5eb/2022-07-30-16-23-02.png" class="">

<p>这个拓展插件可以让用户直接粘贴图片到编辑器内</p>
<p>安装之后需要进行配置</p>
<p>在hexo里，这里使用的资源按文章分文件夹的管理方式，每篇文章都有一个单独的文件夹，用来存储对应文章的素材资源, 语法上不同与markdown，类似这种引用方式</p>
<img src="/posts/060385f8b5eb/2022-07-30-16-28-50.png" class="">

<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>这里修改了插入引用的格式跟存储路径</p>
<img src="/posts/060385f8b5eb/2022-07-30-16-30-14.png" class="">

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>配置好以后，使用快捷键 <code>Ctrl+Shift+P</code> 进行粘贴图片</p>
<p>参考文章</p>
<ul>
<li><a href="https://hexo.io/docs/asset-folders">Asset Folders</a></li>
<li><a href="https://github.com/mushanshitiancai/vscode-paste-image">Paste Image</a></li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>iTerm2配置</title>
    <url>/posts/831dce22a672/</url>
    <content><![CDATA[<h2 id="热键"><a href="#热键" class="headerlink" title="热键"></a>热键</h2><p>配置热键可以方便快速打开终端，而不必通过点击图标打开，可以极大提高使用效率</p>
<p>首先需要启用热键</p>
<img src="/posts/831dce22a672/2023-03-17-01-10-26.png" class="">

<p>然后对热键进行配置</p>
<img src="/posts/831dce22a672/2023-03-17-01-05-13.png" class="">

<ol>
<li>这里使用双击<code>command</code>作为热键</li>
<li>勾选 <code>Floating window</code> 使其可以悬浮在其他窗口的上方（还有一点好处，如果你的终端设置了透明样式，这个透明样式可以显示出透明效果; 但是在普通情况下开启的终端，进行全屏后，将看不出透明效果，因为这时候的桌面背景被隐藏了）</li>
</ol>
<img src="/posts/831dce22a672/2023-03-17-01-21-08.png" class="">

<ol start="3">
<li>为了复用已经开启的终端窗口</li>
</ol>
<p>对窗口进行配置</p>
<img src="/posts/831dce22a672/2023-03-17-01-23-25.png" class="">

<ol>
<li>设置新打开的窗口样式为全屏</li>
<li>热键打开的窗口位置设置为当前光标所在的屏幕（假如你有多个显示屏）</li>
<li>打开位置设置为所有空间，可以保证热键打开的窗口可以处于任意区域，否则只能出现在桌面一，因为其他桌面可能已经没有空间</li>
</ol>
<p>注意：有些时候更改设置后并不会生效，可以将iTerm2重启既可生效</p>
<p>参考文章</p>
<ul>
<li><a href="url">title</a></li>
</ul>
]]></content>
      <tags>
        <tag>iTerm2</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>json为什么不允许注释</title>
    <url>/posts/d704a181ec0e/</url>
    <content><![CDATA[<h3 id="来看看json之父怎么说"><a href="#来看看json之父怎么说" class="headerlink" title="来看看json之父怎么说"></a>来看看json之父怎么说</h3><img src="/posts/d704a181ec0e/14157748-7a92f06db8b373f8.webp" class="">

<blockquote>
<p>Comments in JSON<br>I removed comments from JSON because I saw people were using them to holdparsing directives, a practice which would have destroyed interoperability. I knowthat the lackl of comments makes some people sad, but it shouldn’t.<br>Suppose you are using JSON to keep configuration files, which you would like toannotate. Go ahead and insert all the comments you like. Then pipe it throughJSMin before handing it to your JSON parser.</p>
</blockquote>
<p>谷歌翻译一下：</p>
<blockquote>
<p>JSON中的注释<br>我从JSON中删除了注释，因为我看到有人使用它们来保存指令，这种做法会破坏互操作性。 我知道缺乏注释会让一些人感到悲伤，但事实并非如此。<br>假设您使用JSON来保留您想要注释的配置文件。 继续，插入您喜欢的所有注释。 然后将它传递给JSMin，然后将其传递给JSON解析器。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>koa2文件上传</title>
    <url>/posts/1aa9bbc06798/</url>
    <content><![CDATA[<h2 id="创建项目目录"><a href="#创建项目目录" class="headerlink" title="创建项目目录"></a>创建项目目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> uploadFile</span><br><span class="line"><span class="built_in">cd</span> uploadFile</span><br></pre></td></tr></table></figure>

<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure>

<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install koa koa-router koa-body koa-static</span><br></pre></td></tr></table></figure>

<h2 id="项目主程序-app-js"><a href="#项目主程序-app-js" class="headerlink" title="项目主程序 app.js"></a>项目主程序 app.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> koaBody = <span class="built_in">require</span>(<span class="string">&#x27;koa-body&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;koa2-cors&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">static</span>(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line"></span><br><span class="line">router</span><br><span class="line">    .<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">        ctx.<span class="property">body</span> = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">post</span>(<span class="string">&#x27;/api/upload&#x27;</span>, <span class="title function_">koaBody</span>(&#123;</span><br><span class="line">        <span class="attr">multipart</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">formidable</span>: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;), <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> file = ctx.<span class="property">request</span>.<span class="property">files</span>.<span class="property">file</span></span><br><span class="line">        <span class="keyword">let</span> fileType = file.<span class="property">name</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="title function_">pop</span>()</span><br><span class="line">        <span class="keyword">let</span> fileName = <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>.<span class="subst">$&#123;fileType&#125;</span>`</span></span><br><span class="line">        <span class="keyword">let</span> fileReader = fs.<span class="title function_">createReadStream</span>(file.<span class="property">path</span>)</span><br><span class="line">        <span class="keyword">let</span> writeStream = fs.<span class="title function_">createWriteStream</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;upload&#x27;</span>, <span class="string">`<span class="subst">$&#123;fileName&#125;</span>`</span>))</span><br><span class="line"></span><br><span class="line">        fileReader.<span class="title function_">pipe</span>(writeStream)</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;上传成功&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/upload/<span class="subst">$&#123;fileName&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .<span class="title function_">use</span>(router.<span class="title function_">routes</span>())</span><br><span class="line">    .<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>Koa2</tag>
      </tags>
  </entry>
  <entry>
    <title>mac安装文件提示文件已损坏</title>
    <url>/posts/eb725f63ae59/</url>
    <content><![CDATA[<p>在终端中执行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xattr -d com.apple.quarantine /Applications/xxxx.app</span><br></pre></td></tr></table></figure>

<p><code>/Applications/xxxx.app</code>为应用的路径，可以直接拖拽应用到终端，不用手动输入路径</p>
<p><code>xattr -d</code>命令是在macOS或类Unix系统中用于删除文件或目录的扩展属性（Extended Attributes）的命令。</p>
<p>如果需要查看文件的具体附加属性，可以使用 xattr 命令，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">xattr filename.txt</span></span><br><span class="line">com.apple.metadata:kMDItemWhereFroms</span><br></pre></td></tr></table></figure>

<p>这个命令会列出文件 filename.txt 的所有附加属性。</p>
<p>参考文章</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1665652">macOS 安装软件已损坏无法打开解决办法 (真好用！)
</a></li>
</ul>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>js上传视频图片预览</title>
    <url>/posts/6eb7991bfc44/</url>
    <content><![CDATA[<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="demo/list/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%A2%84%E8%A7%88">文件上传预览</a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>上传视频文件<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;video/*&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>视频预览<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>上传图片文件<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>图片预览<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">video</span>,</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JS</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> videoEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> imgEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">    form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(event.<span class="property">target</span>.<span class="property">type</span> === <span class="string">&#x27;file&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> file = event.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span>(event.<span class="property">target</span>.<span class="property">accept</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;video&#x27;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                videoEl.<span class="property">src</span> = <span class="title function_">getObjectURL</span>(file)</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.<span class="property">target</span>.<span class="property">accept</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;image&#x27;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                imgEl.<span class="property">src</span> = <span class="title function_">getObjectURL</span>(file)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">getObjectURL</span> = file =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">createObjectURL</span> != <span class="literal">undefined</span>) &#123; </span><br><span class="line">            <span class="comment">// basic</span></span><br><span class="line">            url = <span class="variable language_">window</span>.<span class="title function_">createObjectURL</span>(file);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">URL</span> != <span class="literal">undefined</span>) &#123; </span><br><span class="line">            <span class="comment">// mozilla(firefox)</span></span><br><span class="line">            url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(file);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">webkitURL</span> != <span class="literal">undefined</span>) &#123; </span><br><span class="line">            <span class="comment">// webkit or chrome</span></span><br><span class="line">            url = <span class="variable language_">window</span>.<span class="property">webkitURL</span>.<span class="title function_">createObjectURL</span>(file);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 修改登录密码</title>
    <url>/posts/86638b9edd43/</url>
    <content><![CDATA[<p>先登录mysql</p>
<p><code>mysql -u root -p</code></p>
<img src="/posts/86638b9edd43/14157748-9e35c9a6a31a677b.png" class="">

<p>使用 SET PASSWORD命令设置密码</p>
<p><code>set password for 用户名@localhost = password(&#39;新密码&#39;);</code></p>
<p>例如设置root账户密码为root</p>
<p><code>set password for root@localhost = password(&#39;root&#39;);</code></p>
<img src="/posts/86638b9edd43/14157748-8d93906580f4aada.png" class="">

<p>退出登录后用新密码登录测试是否设置成功</p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库备份</title>
    <url>/posts/dacfc9d3e07c/</url>
    <content><![CDATA[<h2 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h2><p><code>mysqldump -hhostname -uusername -ppassword databasename &gt; backupfile.sql</code></p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>termux使用</title>
    <url>/posts/6b240a7c6edd/</url>
    <content><![CDATA[<h2 id="一、安装termux"><a href="#一、安装termux" class="headerlink" title="一、安装termux"></a>一、安装termux</h2><p>termux可以在google play商店下载</p>
<p>安装完成后，打开termux，更新软件列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>

<p>更新软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt upgrade</span><br></pre></td></tr></table></figure>

<h2 id="二、ssh连接"><a href="#二、ssh连接" class="headerlink" title="二、ssh连接"></a>二、ssh连接</h2><p>安装ssh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install openssh</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sshd</span><br></pre></td></tr></table></figure>

<h3 id="1-密码登录"><a href="#1-密码登录" class="headerlink" title="1.密码登录"></a>1.密码登录</h3><p>查看当前用户<code>whoami</code></p>
<p>设置密码<code>passwd</code></p>
<p>在电脑上通过设置的密码连接到手机的termux的ssh服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -p 8022 u0_a112@192.168.199.200</span><br></pre></td></tr></table></figure>

<p>注意：这里的端口为<code>8022</code>, <code>u0_a122</code>为用户名，<code>192.168.199.200</code>为内网手机ip地址</p>
<p>输入密码即可连接</p>
<h3 id="2-密钥免密登录"><a href="#2-密钥免密登录" class="headerlink" title="2.密钥免密登录"></a>2.密钥免密登录</h3><p>如果经常连接手机端的ssh，密码还是比较麻烦的，使用ssh密钥登录可以免去每次输入密码的麻烦</p>
<p>首先使用密码连接到手机端ssh</p>
<p>为手机端生成ssh密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>全部默认，回车生成默认密钥</p>
<p>执行<code>exit</code>或<code>logout</code>退出登录</p>
<p>下面开始将我们本地的密钥上传到手机端</p>
<p>如果本机还没有密钥的话，可以通过上述的方式生成密钥</p>
<p>然后上传到手机端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -p 8022 u0_a112@192.168.199.200</span><br></pre></td></tr></table></figure>

<p>输入密码完成上传</p>
<p>这时再尝试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -p 8022 u0_a112@192.168.199.200</span><br></pre></td></tr></table></figure>

<p>连接手机的ssh服务，即可直接登录，不用输入密码</p>
<h2 id="三、安装nodejs"><a href="#三、安装nodejs" class="headerlink" title="三、安装nodejs"></a>三、安装nodejs</h2><p>可以直接通过<code>apt</code>包管理器进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install nodejs</span><br></pre></td></tr></table></figure>

<p>安装完成后，可以查看下node的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure>

<h2 id="四、http静态服务器"><a href="#四、http静态服务器" class="headerlink" title="四、http静态服务器"></a>四、http静态服务器</h2><p>既然已经可以安装nodejs，那么启动一个http静态服务器还是很简单的</p>
<p>通过<code>npm</code>安装<code>http-server</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g http-server</span><br></pre></td></tr></table></figure>

<p>运行，默认当前目录作为http静态服务的根目录,端口8080</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http-server</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>termux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装常用软件</title>
    <url>/posts/52c229c39ea7/</url>
    <content><![CDATA[<h2 id="安装vscode"><a href="#安装vscode" class="headerlink" title="安装vscode"></a>安装vscode</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -P Downloads/ https://vscode.cdn.azure.cn/stable/5763d909d5f12fe19f215cbfdd29a91c0fa9208a/code_1.45.1-1589445302_amd64.deb</span><br></pre></td></tr></table></figure>

<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd Downloads/</span><br><span class="line">sudo dpkg -i code_1.45.1-1589445302_amd64.deb</span><br></pre></td></tr></table></figure>

<h3 id="3-查看版本"><a href="#3-查看版本" class="headerlink" title="3.查看版本"></a>3.查看版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">code --version</span><br></pre></td></tr></table></figure>

<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>安装nodejs不要使用<code>apt</code>,<code>apt</code>安装的版本较老，不是最新的</p>
<p>目前nodejs官网长期稳定版本为 12.X</p>
<p>这里采用官方提供的方式进行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>

<p>安装完成后查看nodejs版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure>
<p>回显</p>
<p><code>v12.16.3</code></p>
<p>其他版本的安装可查看官方提供的二进制安装说明 <a href="https://github.com/nodesource/distributions/blob/master/README.md#nodesource-nodejs-binary-distributions">NodeSource Node.js Binary Distributions</a></p>
<h2 id="安装deno"><a href="#安装deno" class="headerlink" title="安装deno"></a>安装deno</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>deno官网的<a href="https://deno.land/#installation">这里</a>提供了linux下的安装方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo curl -fsSL https://deno.land/x/install/install.sh | sh</span><br></pre></td></tr></table></figure>

<h3 id="2-环境变量"><a href="#2-环境变量" class="headerlink" title="2.环境变量"></a>2.环境变量</h3><p>从安装完成的回显信息可以知道deno并没有自动配置环境变量，而是提示手动进行配置</p>
<p>编辑<code>~.profile</code>文件<br>并添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export DENO_INSTALL=&quot;/home/yan/.deno&quot;</span><br><span class="line">export PATH=&quot;$DENO_INSTALL/bin:$PATH&quot;</span><br></pre></td></tr></table></figure>

<p>也就是deno提示手动配置的内容</p>
<p>保存后重启</p>
<p>重启后查看deno版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deno --version</span><br></pre></td></tr></table></figure>

<p>echo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deno 1.0.0</span><br><span class="line">v8 8.4.300</span><br><span class="line">typescript 3.9.2</span><br></pre></td></tr></table></figure>

<p>en… deno 1.0.0 一个新的起点</p>
<h2 id="安装chrome"><a href="#安装chrome" class="headerlink" title="安装chrome"></a>安装chrome</h2><h3 id="1-download"><a href="#1-download" class="headerlink" title="1.download"></a>1.download</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -P ~/Downloads/ https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>

<h3 id="2-install"><a href="#2-install" class="headerlink" title="2.install"></a>2.install</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd Downloads/</span><br><span class="line">sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>videojs使用</title>
    <url>/posts/b7ef37c6c6b8/</url>
    <content><![CDATA[<h2 id="如何引入videojs"><a href="#如何引入videojs" class="headerlink" title="如何引入videojs"></a>如何引入videojs</h2><p>引入videojs的css js, 给video元素加上video-js类，并加上<code>data-setup</code>属性， 这样就videojs就可以正常工作了</p>
<h3 id="cdn"><a href="#cdn" class="headerlink" title="cdn"></a>cdn</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>videojs<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入css --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://vjs.zencdn.net/7.8.4/video-js.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">video</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;video-js&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">controls</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;640&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">poster</span>=<span class="string">&quot;poster.jpg&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-setup</span>=<span class="string">&quot;&#123;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;vjs-no-js&quot;</span>&gt;</span>To view this video please enable JavaScript, and consider upgrading to a web browser that <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://videojs.com/html5-video-support&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>supports HTML5 video<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://vjs.zencdn.net/7.8.4/video.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个加过视频封面的样子</p>
<img src="/posts/b7ef37c6c6b8/2020-08-16_125500.jpg" class="">

<p>这是视频播放时的界面</p>
<img src="/posts/b7ef37c6c6b8/2020-08-16_125049.jpg" class="">

<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev video.js</span><br></pre></td></tr></table></figure>

<p>安装完成后，需要引入css和js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;video/dist/video-js.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> videojs <span class="keyword">from</span> <span class="string">&#x27;videojs&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><h3 id="通过cdn"><a href="#通过cdn" class="headerlink" title="通过cdn"></a>通过cdn</h3><p>引入主题样式，并向video元素添加相应的主题类，例如 <code>vjs-theme-city</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;player&quot;</span> <span class="attr">class</span>=<span class="string">&quot;video-js vjs-theme-city&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- city --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot; https://unpkg.com/@videojs/themes@1/dist/city/index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- fantasy --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot; https://unpkg.com/@videojs/themes@1/dist/fantasy/index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- forest --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot; https://unpkg.com/@videojs/themes@1/dist/forest/index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- sea --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot; https://unpkg.com/@videojs/themes@1/dist/sea/index.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>city theme</p>
<img src="/posts/b7ef37c6c6b8/2020-08-16_165242.jpg" class="">

<p>fantasy theme</p>
<img src="/posts/b7ef37c6c6b8/2020-08-16_165637.jpg" class="">

<p>forest theme</p>
<img src="/posts/b7ef37c6c6b8/2020-08-16_184209.jpg" class="">

<p>sea theme</p>
<img src="/posts/b7ef37c6c6b8/2020-08-16_184304.jpg" class="">

<h3 id="通过npm"><a href="#通过npm" class="headerlink" title="通过npm"></a>通过npm</h3><p>通过npm安装主题样式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install @videojs/themes</span><br></pre></td></tr></table></figure>

<p>然后模块引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// city</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@videojs/themes/dist/city/index.css&#x27;</span></span><br><span class="line"><span class="comment">// fantasy</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@videojs/themes/dist/fantasy/index.css&#x27;</span></span><br><span class="line"><span class="comment">// forest</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@videojs/themes/dist/forest/index.css&#x27;</span></span><br><span class="line"><span class="comment">// sea</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@videojs/themes/dist/sea/index.css&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然后在我们的player播放器的video元素添加类</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;player&quot;</span> <span class="attr">class</span>=<span class="string">&quot;video-js vjs-theme-city&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>videojs</tag>
      </tags>
  </entry>
  <entry>
    <title>window实体机ubuntu系统安装</title>
    <url>/posts/fca038baf772/</url>
    <content><![CDATA[<h2 id="情形"><a href="#情形" class="headerlink" title="情形"></a>情形</h2><ul>
<li><p>window电脑安装ubuntu系统，非多系统</p>
</li>
<li><p>ubuntu-18.04</p>
</li>
<li><p>u盘安装</p>
</li>
</ul>
<h2 id="1-正常安装"><a href="#1-正常安装" class="headerlink" title="1.正常安装"></a>1.正常安装</h2><h3 id="下载系统镜像"><a href="#下载系统镜像" class="headerlink" title="下载系统镜像"></a>下载系统镜像</h3><p>下载iso系统镜像，国内在官网下载慢的话，可以到<a href="https://developer.aliyun.com/mirror/">阿里云镜像站</a>下载</p>
<p>这里下载的是<code>ubuntu-18.04.4-desktop-amd64.iso</code></p>
<h3 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h3><p>这里使用 软碟通 </p>
<p>打开软碟通 - 启动- 写入硬盘映像</p>
<p><code>便捷启动</code>选择 <code>写入新的驱动器引导扇区</code>中的<code>Syslinux</code></p>
<p>配置好后便可以写入到U盘</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>配置好启动项，从U盘启动即可，正常情况下即可进入系统安装界面，完</p>
<h2 id="3-ThinkPad-E485安装Ubuntu"><a href="#3-ThinkPad-E485安装Ubuntu" class="headerlink" title="3.ThinkPad E485安装Ubuntu"></a>3.ThinkPad E485安装Ubuntu</h2><p>一般的电脑进入U盘启动后便可正常安装，但这个本子却是不能的，据说是国内这个本子的BIOS存在问题导致（逃</p>
<p>当然这个问题网上也是有解决办法的，比如这个帖子<a href="https://tieba.baidu.com/p/6009950485">E485 ( RYZEN )安装linux教程</a></p>
<p>编辑安装选项，linux行末添加 <code>ivrs=ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft</code>,保存后启动后便可以正常进入安装界面</p>
<p>安装完成重启后会发现还是进不去系统，这里还是跟前面一样需要编辑 添加<code>ivrs=ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft</code></p>
<p>启动后编辑<code>/etc/default/grub</code></p>
<p>在<code>GRUB_CMDLINE_LINUX_DEFAULT</code>行末添加<code>ivrs=ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft</code>即可， 完</p>
<p>参考文章</p>
<ul>
<li><a href="https://tieba.baidu.com/p/6009950485">E485 ( RYZEN )安装linux教程</a></li>
</ul>
]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>人脸识别face-api.js使用</title>
    <url>/posts/648479544660/</url>
    <content><![CDATA[<p><a href="https://github.com/justadudewhohacks/face-api.js">face-api.js</a>基于 <a href="https://github.com/tensorflow/tfjs">tensorflow.js</a></p>
<h2 id="browser端"><a href="#browser端" class="headerlink" title="browser端"></a>browser端</h2>]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>前端如何实现准确的倒计时效果</title>
    <url>/posts/262808016b01/</url>
    <content><![CDATA[<h2 id="1-场景"><a href="#1-场景" class="headerlink" title="1.场景"></a>1.场景</h2><p>试想，现在有这样一个场景，用户有一个观看视频的任务，任务的总时间为3min，观看达到这个时间用户即可完成此任务，我们需要做一个完成倒计时，来提示用户还剩多长时间即可完成该任务。</p>
<p>最容易想到的实现方式是使用定时器setInterval，每隔1s倒计时减1，用户暂停播放时清除定时器，开始播放时重启定时器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> countdown = <span class="number">3</span> * <span class="number">60</span></span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止倒计时</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">stop</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">  timer = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始倒计时</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">start</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (countdown &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        countdown--</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;countdown: &#x27;</span>, countdown)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">        <span class="title function_">stop</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的实现方式在一般情况下不会出现大的问题，但是如果用户暂停次数比较多的话，会发现用户实际播放时长大于倒计时所记的时长。</p>
<p>想个比较及端的例子，用户每次播放时长不超过1s，那么我们的倒计时一直保持不变，显然我们实现的倒计时是不准确的，不可靠的。</p>
<p>可能你会想着缩短setInterval的间隔来减少这种误差，但是间隔过小，又有阻塞的可能，定时器本身也不是那么精确，总有几毫秒的误差，而且显然这种做法略显笨拙，</p>
<p>这时我们就要思考是不是需要换一种实现方式，更优雅一些。</p>
<p>要想每次暂停播放不损失那不到1s的时间，我们只有精确到ms才行，既然不能用setInterval间隔1ms，那我们是可以取当前时间的毫秒数的，这个是非常精确的，本身就是以ms为单位的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> countdown = <span class="number">3</span> * <span class="number">60</span></span><br><span class="line"><span class="keyword">let</span> time = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> startTime = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止倒计时</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">stop</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  time += (<span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime)</span><br><span class="line">  <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">  timer = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始倒计时</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">start</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">    startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> currentCountdown = countdown - <span class="title class_">Math</span>.<span class="title function_">floor</span>((<span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime + time) / <span class="number">1000</span>) </span><br><span class="line">      <span class="keyword">if</span> (currentCountdown &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;countdown: &#x27;</span>, currentCountdown)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">        <span class="title function_">stop</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们依然使用了setInterval，但是只是用来每隔一秒读取倒计时，用来实现用户视图层的更新，实际与倒计时实现并无太大关联，我们可以封装一个倒计时</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Countdown</span> &#123;</span><br><span class="line">  <span class="comment">// 传入倒计时初始值(ms)</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">countdown</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastTime</span> = <span class="number">0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">startTime</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">countdown</span> = countdown</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stoped</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始计时</span></span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">startTime</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stoped</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 停止计时</span></span><br><span class="line">  <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastTime</span> += <span class="title class_">Date</span>.<span class="title function_">now</span>() - <span class="variable language_">this</span>.<span class="property">startTime</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stoped</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取倒计时</span></span><br><span class="line">  <span class="title function_">getCountdown</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">stoped</span>) &#123;</span><br><span class="line">      result = <span class="variable language_">this</span>.<span class="property">countdown</span> - <span class="variable language_">this</span>.<span class="property">lastTime</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = <span class="variable language_">this</span>.<span class="property">countdown</span> - (<span class="title class_">Date</span>.<span class="title function_">now</span>() - <span class="variable language_">this</span>.<span class="property">startTime</span>) - <span class="variable language_">this</span>.<span class="property">lastTime</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result &gt;= <span class="number">0</span> ? result : <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一但我们创建了一个<code>Countdown</code>实例，就可以随时通过调用实例的<code>getCountdown</code>方法获取当前的倒计时。在未开始<code>start</code>时，会返回倒计时总秒数；</p>
<p>开始倒计时后，我们可以指定一定的时间间隔读取当前的倒计时，如果你想每秒更新view的倒计时，可以每秒取样，或是更小的时间间隔；</p>
<p>停止倒计时后，我们只能读取到一个固定值，除非再次开启倒计时；</p>
<p>倒计时为0时，将一直返回0，表示倒计时完成，可以将此视为完成标志；</p>
<p>以上我们已经可以拿到准确的倒计时，不论是倒计时还未完成，还是已经完成返回0，都能准确表示当前倒计时状态，但还是存在一个问题，就是我们无法知道倒计时是何时完成的，即便我们读取倒计时的值为0时，只能说明倒计时已经完成，却无法准确知道合适完成</p>
<p>所以这里还需要补充一个完成回调，来告诉我们倒计时何时完成，以便执行后续的业务逻辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Countdown</span> &#123;</span><br><span class="line">  <span class="comment">// 传入倒计时初始值(ms)及完成回调</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">countdown, callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastTime</span> = <span class="number">0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">startTime</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">countdown</span> = countdown</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span> = callback</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始计时</span></span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">startTime</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callback</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">callback</span>()</span><br><span class="line">    &#125;, <span class="variable language_">this</span>.<span class="property">countdown</span> - <span class="variable language_">this</span>.<span class="property">lastTime</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 停止计时</span></span><br><span class="line">  <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastTime</span> += <span class="title class_">Date</span>.<span class="title function_">now</span>() - <span class="variable language_">this</span>.<span class="property">startTime</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span>) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取倒计时</span></span><br><span class="line">  <span class="title function_">getCountdown</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> currentTime = <span class="title class_">Date</span>.<span class="title function_">now</span>() - <span class="variable language_">this</span>.<span class="property">startTime</span> + <span class="variable language_">this</span>.<span class="property">lastTime</span></span><br><span class="line">      result = <span class="variable language_">this</span>.<span class="property">countdown</span> - currentTime</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = <span class="variable language_">this</span>.<span class="property">countdown</span> - <span class="variable language_">this</span>.<span class="property">lastTime</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result &gt;= <span class="number">0</span> ? result : <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>如何取消单选按钮的选中状态</title>
    <url>/posts/23d019055100/</url>
    <content><![CDATA[<h2 id="1-常规用法"><a href="#1-常规用法" class="headerlink" title="1.常规用法"></a>1.常规用法</h2><p>单选按钮通常用于用户在一组选项中选中某一项的场景中，一但用户选中其中一项，是不可以再次点击以取消选中的。</p>
<p>常见的写法有以下几种</p>
<p>无label的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;option&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span> <span class="attr">checked</span>&gt;</span>选项A</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;option&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span>&gt;</span>选项B</span><br></pre></td></tr></table></figure>

<p>通过for关联</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;optionA&quot;</span> <span class="attr">name</span>=<span class="string">&quot;option2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;optionA&quot;</span>&gt;</span>选项A<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;optionB&quot;</span> <span class="attr">name</span>=<span class="string">&quot;option2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;optionB&quot;</span>&gt;</span>选项B<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或是直接将input放到对应的label中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;option3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span> <span class="attr">checked</span>&gt;</span>选项A<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;option3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span>&gt;</span>选项B<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-取消选中"><a href="#2-取消选中" class="headerlink" title="2.取消选中"></a>2.取消选中</h2><p>如果有需求需要允许用户将已经选中的单选按钮取消选中，这个需求其实并不是非常常见，但也算有实际的需求场景，还算合理<br>但是默认提供的单选按钮是无法取消选中的，那么只有通过相应的事件进行处理了</p>
<p>对于一组单选按钮，他们是相互关联的，选中其一，则其他的会取消选中；那么我们可以监听单选的click事件<br>如果<br>1.已经选中，那么设置元素的checked &#x3D; false，取消选中<br>2.未选中，那么设置元素的checked &#x3D; true， 选中；同组的其它单选元素的checked &#x3D; false</p>
<p>但在实际处理中会发现，我们并不知道click前的状态，因为点击后，我们事件的e.target.checked都会为true，所以我们应该记录下click之前的状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> radioEls = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;input[type=radio]&#x27;</span>)</span><br><span class="line">  radioEls.<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">    el.<span class="property">_checked</span> = el.<span class="property">checked</span></span><br><span class="line">    el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> target = e.<span class="property">target</span></span><br><span class="line">      <span class="keyword">if</span> (target.<span class="property">_checked</span>) &#123;</span><br><span class="line">        target.<span class="property">checked</span> = target.<span class="property">_checked</span> = <span class="literal">false</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">`input[name=<span class="subst">$&#123;target.name&#125;</span>]`</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">          el.<span class="property">checked</span> = el.<span class="property">_checked</span> = <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">        target.<span class="property">checked</span> = target.<span class="property">_checked</span> = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p><a href="/demo/post/1.html">查看效果</a></p>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序ios环境下finally报错</title>
    <url>/posts/48ca7288cd2a/</url>
    <content><![CDATA[<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>判断是否存在finally方法，不存在则在Promise原型上添加finally方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 兼容ios真机环境下Promise对象不存在finally方法</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">finally</span>) &#123;</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">finally</span> = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      callback &amp;&amp; <span class="title function_">callback</span>(res)</span><br><span class="line">    &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      callback &amp;&amp; <span class="title function_">callback</span>(error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Promise finally实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">finally</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> P = <span class="variable language_">this</span>.<span class="property">constructor</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">value</span>  =&gt;</span> P.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> value),</span><br><span class="line">    <span class="function"><span class="params">reason</span> =&gt;</span> P.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>提交next主题到站点仓库</title>
    <url>/posts/b7408c7cc9cf/</url>
    <content><![CDATA[<p>由于安装 next 主题时，使用的时 <code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code>,直接克隆的 next 主题仓库，当我们要提交站点到仓库时，会发现提交的 themes&#x2F;next&#x2F; 是空目录，没有内容，通过 <code>git status</code> 命令查看仓库状态，有条信息是 <code>modified: themes/next (modified content)</code>，并表明该修改在子模块内，要提交的话也要在子模块仓库里提交</p>
<p>我们可以删除目录 <code>themes/next</code> 的版本控制，使得该目录属于站点仓库的版本控制之内，之后便可以正常提交了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -rf --cached themes/next/</span><br><span class="line">git add themes/next/*</span><br><span class="line">git commit</span><br><span class="line">git push</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>文本省略号</title>
    <url>/posts/a98a784c8446/</url>
    <content><![CDATA[<h2 id="单行文本溢出省略"><a href="#单行文本溢出省略" class="headerlink" title="单行文本溢出省略"></a>单行文本溢出省略</h2><p>HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一行很长很长的文字，我是一行很长很长的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dashed;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>view</p>
<img src="/posts/a98a784c8446/%7B8F04F25F-E1A5-4D87-8EC2-7B7B3EF47BE2%7D.png.jpg" class="">

<h2 id="多行文本溢出"><a href="#多行文本溢出" class="headerlink" title="多行文本溢出"></a>多行文本溢出</h2><h3 id="1-使用css实现"><a href="#1-使用css实现" class="headerlink" title="1.使用css实现"></a>1.使用css实现</h3><p>现行CSS中暂无统一实现该样式的属性</p>
<p>但针对于webkit内核的浏览器，可以采用下面的方式实现该样式</p>
<p>HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一段很长很长的多行文本，我是一段很长很长的多行文本，我是一段很长很长的多行文本，我是一段很长很长的多行文本，我是一段很长很长的多行文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dashed;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>view</p>
<img src="/posts/a98a784c8446/%7B2DD89E03-B757-44CD-81A4-68193E5F86B3%7D.png.jpg" class="">

<h3 id="2-使用js实现"><a href="#2-使用js实现" class="headerlink" title="2.使用js实现"></a>2.使用js实现</h3><p>使用 <a href="https://github.com/josephschmitt/Clamp.js">Clamp.js</a></p>
<p>HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一段很长很长的多行文本，我是一段很长很长的多行文本，我是一段很长很长的多行文本，我是一段很长很长的多行文本，我是一段很长很长的多行文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dashed;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JS</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">$clamp(el, &#123;<span class="attr">clamp</span>: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>view</p>
<img src="/posts/a98a784c8446/%7B5C6AD337-3220-4A24-ACE2-087581A8974F%7D.png.jpg" class="">


<p>参考内容:</p>
<ul>
<li><p><a href="https://css-tricks.com/almanac/properties/l/line-clamp/">line-clamp</a></p>
</li>
<li><p><a href="https://joe.sh/clamp-js">Introducing Clamp.js</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派 UPS-18650</title>
    <url>/posts/303bab8c0f3e/</url>
    <content><![CDATA[<h2 id="配置时钟"><a href="#配置时钟" class="headerlink" title="配置时钟"></a>配置时钟</h2><p>启用i2c</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure>

<p>在interfacing options 中选择启用i2c</p>
<p>运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo i2cdetect -l</span><br></pre></td></tr></table></figure>

<p>查看所有的i2c总线</p>
<p>这里回显</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">i2c-1   i2c             bcm2835 I2C adapter                     I2C adapter</span><br></pre></td></tr></table></figure>

<p>查看i2c上连接的设备</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo i2cdetect -y 1</span><br></pre></td></tr></table></figure>

<p>回显</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f</span><br><span class="line">00:          -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">30: -- -- -- -- -- -- 36 -- -- -- -- -- -- -- -- --</span><br><span class="line">40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line">60: -- -- -- -- -- -- -- -- 68 -- -- -- -- -- -- --</span><br><span class="line">70: -- -- -- -- -- -- -- --</span><br></pre></td></tr></table></figure>

<p>这里的0x36为MAX17040G的地址; 0x68为DS1307Z+的地址</p>
<p>加载 i2c 模块</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo modprobe i2c-dev</span><br></pre></td></tr></table></figure>

<p>切换到超级管理 <code>su</code></p>
<p>在i2cx 新增一个设备, 名字为ds1307, 设备地址为 0x68</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> ds1307 0x68 &gt; /sys/class/i2c-adapter/i2c-1/new_device</span><br></pre></td></tr></table></figure>

<p>查看我们的刚刚添加的硬件时钟的当前时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hwclock -r</span><br></pre></td></tr></table></figure>

<p>回显</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2000-01-01 08:01:24.321813+0800</span><br></pre></td></tr></table></figure>

<p>很显然这是刚添加的时钟, 还未同步正确的时间</p>
<p>将系统时间写入到硬件时钟</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hwclock -w</span><br></pre></td></tr></table></figure>

<p>这时我们再次读取硬件时钟的话</p>
<p>回显</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2019-11-09 17:26:30.864206+0800</span><br></pre></td></tr></table></figure>

<p>已经同步到系统时钟</p>
<h2 id="同步硬件时钟到系统时钟"><a href="#同步硬件时钟到系统时钟" class="headerlink" title="同步硬件时钟到系统时钟"></a>同步硬件时钟到系统时钟</h2><p>当我们的树莓派断电后, 再次启动后, 如果没有网络的话, 她是不能正确同步系统时间的, 但我们的 UPS 上有一颗时钟芯片, 并且一直有纽扣电池供电, 并不会丢失我们上面设置好的日期时间, 所以我们需要在树莓派启动时将硬件时钟的时间写入到树莓派的系统时间.</p>
<p>打开树莓派的启动文件rc.local</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nano /etc/rc.local</span><br></pre></td></tr></table></figure>

<p>在exit 0 前添加</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">modprobe i2c-dev</span><br><span class="line"><span class="built_in">echo</span> ds1307 0x68 &gt; /sys/class/i2c-adapter/i2c-1/new_device</span><br><span class="line">hwclock -r</span><br><span class="line">hwclock -s</span><br></pre></td></tr></table></figure>

<p>重启在无网络的情况下可以测试系统时钟是否被正确同步</p>
<h2 id="读取电量"><a href="#读取电量" class="headerlink" title="读取电量"></a>读取电量</h2><p>这里我们先简单跑一下板方提供的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> smbus</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readVoltage</span>(<span class="params">bus</span>):</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;This function returns as float the voltage from the Raspi UPS Hat via the provided SMBus object&quot;</span></span><br><span class="line">        address = <span class="number">0x36</span></span><br><span class="line">        read = bus.read_word_data(address, <span class="number">2</span>)</span><br><span class="line">        swapped = struct.unpack(<span class="string">&quot;&lt;H&quot;</span>, struct.pack(<span class="string">&quot;&gt;H&quot;</span>, read))[<span class="number">0</span>]</span><br><span class="line">        voltage = swapped * <span class="number">1.25</span> /<span class="number">1000</span>/<span class="number">16</span></span><br><span class="line">        <span class="keyword">return</span> voltage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readCapacity</span>(<span class="params">bus</span>):</span><br><span class="line">        <span class="string">&quot;This function returns as a float the remaining capacity of the battery connected to the Raspi UPS Hat via the provided SMBus object&quot;</span></span><br><span class="line">        address = <span class="number">0x36</span></span><br><span class="line">        read = bus.read_word_data(address, <span class="number">4</span>)</span><br><span class="line">        swapped = struct.unpack(<span class="string">&quot;&lt;H&quot;</span>, struct.pack(<span class="string">&quot;&gt;H&quot;</span>, read))[<span class="number">0</span>]</span><br><span class="line">        capacity = swapped/<span class="number">256</span></span><br><span class="line">        <span class="keyword">return</span> capacity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bus = smbus.SMBus(<span class="number">1</span>)  <span class="comment"># 0 = /dev/i2c-0 (port I2C0), 1 = /dev/i2c-1 (port I2C1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line"> <span class="built_in">print</span> <span class="string">&quot;++++++++++++++++++++&quot;</span></span><br><span class="line"> <span class="built_in">print</span> <span class="string">&quot;Voltage:%5.2fV&quot;</span> % readVoltage(bus)</span><br><span class="line"></span><br><span class="line"> <span class="built_in">print</span> <span class="string">&quot;Battery:%5i%%&quot;</span> % readCapacity(bus)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> readCapacity(bus) == <span class="number">100</span>:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Battery FULL&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> readCapacity(bus) &lt; <span class="number">20</span>:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Battery LOW&quot;</span></span><br><span class="line"> <span class="built_in">print</span> <span class="string">&quot;++++++++++++++++++++&quot;</span></span><br><span class="line"> time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>回显</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">++++++++++++++++++++</span><br><span class="line">Voltage: 3.64V</span><br><span class="line">Battery:    8%</span><br><span class="line">Battery LOW</span><br><span class="line">++++++++++++++++++++</span><br></pre></td></tr></table></figure>

<p>参考文章</p>
<ul>
<li><a href="https://www.cnblogs.com/likai-abc/p/9255039.html">树莓派UPS-18650，添加时钟</a></li>
</ul>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派3B之系统安装</title>
    <url>/posts/5530adc57ae9/</url>
    <content><![CDATA[<h2 id="格式化SD卡"><a href="#格式化SD卡" class="headerlink" title="格式化SD卡"></a>格式化SD卡</h2><p>下载SD卡格式化工具 <a href="https://www.sdcard.org/downloads/formatter_4/">SD Card Formatter</a></p>
<p>软件界面如下，以默认设置进行格式化即可</p>
<img src="/posts/5530adc57ae9/TIM%E6%88%AA%E5%9B%BE20180115231316.png" class="">

<h2 id="下载系统"><a href="#下载系统" class="headerlink" title="下载系统"></a>下载系统</h2><p>下载树莓派系统镜像 <a href="https://www.raspberrypi.org/downloads/">https://www.raspberrypi.org/downloads/</a></p>
<h2 id="写入系统镜像"><a href="#写入系统镜像" class="headerlink" title="写入系统镜像"></a>写入系统镜像</h2><p>下载 <a href="http://sourceforge.net/projects/win32diskimager/">Win32 DiskImager</a>,该工具可以把系统镜像写入SD卡</p>
<img src="/posts/5530adc57ae9/TIM%E6%88%AA%E5%9B%BE20180110175647.png" class="">

<p>写入系统后，SD卡被分区</p>
<img src="/posts/5530adc57ae9/TIM%E6%88%AA%E5%9B%BE20180115232335.png" class="">

<h2 id="启动系统"><a href="#启动系统" class="headerlink" title="启动系统"></a>启动系统</h2><p>把SD卡插入树莓派，插上电源系统即可启动</p>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派3B开箱</title>
    <url>/posts/c9ac426b4a37/</url>
    <content><![CDATA[<h2 id="开箱清单"><a href="#开箱清单" class="headerlink" title="开箱清单"></a>开箱清单</h2><ul>
<li>树莓派3代B型</li>
<li>2.5A带开关5V电源</li>
<li>闪迪32G内存卡</li>
<li>散热片一套</li>
<li>铝合金外壳一个</li>
</ul>
<h2 id="开箱组装"><a href="#开箱组装" class="headerlink" title="开箱组装"></a>开箱组装</h2><h3 id="树莓派3代，B型，E14中国版"><a href="#树莓派3代，B型，E14中国版" class="headerlink" title="树莓派3代，B型，E14中国版"></a>树莓派3代，B型，E14中国版</h3><img src="/posts/c9ac426b4a37/IMG_20180110_143901.jpg" class="">

<p>3B的外包装盒依然延续上一代简洁大方的特点，并突出板载WiFi和蓝牙功能</p>
<h3 id="5V-2-5A电源"><a href="#5V-2-5A电源" class="headerlink" title="5V 2.5A电源"></a>5V 2.5A电源</h3><p>以前玩树莓派都是直接用手机电源，有些电源输出电流过小，会造成树莓派不稳定，树莓派3B推荐使用2.5A的电源（这个电源带开关，用起来还是挺方便的，不用频繁拔插电源，也延长了电源口的使用寿命，话说这次买的电源质量挺好的，做工很实）</p>
<img src="/posts/c9ac426b4a37/IMG_20180110_143751.jpg" class="">

<h3 id="闪迪32G-class10-内存卡"><a href="#闪迪32G-class10-内存卡" class="headerlink" title="闪迪32G class10 内存卡"></a>闪迪32G class10 内存卡</h3><p>树莓派内存卡一般用8 ~ 64G（那我为什么要用32G呢，当然是为了节约成本，这个性价比最高，太大了也没有多大的用途）</p>
<img src="/posts/c9ac426b4a37/IMG_20180110_143936.jpg" class="">

<h3 id="两铜一铝散热片"><a href="#两铜一铝散热片" class="headerlink" title="两铜一铝散热片"></a>两铜一铝散热片</h3><p>树莓派背面内存颗粒散热片还带有树莓派的logo，很不错</p>
<img src="/posts/c9ac426b4a37/IMG_20180110_143924.jpg" class="">

<h3 id="铝合金外壳"><a href="#铝合金外壳" class="headerlink" title="铝合金外壳"></a>铝合金外壳</h3><img src="/posts/c9ac426b4a37/IMG_20180110_144613.jpg" class="">

<p>树莓派3已经发售很久了，可为什么现在才买呢，嗯嗯，原因就是它，金属质感的外表，无可挑剔的做工，简直完美</p>
<h3 id="防静电包装"><a href="#防静电包装" class="headerlink" title="防静电包装"></a>防静电包装</h3><img src="/posts/c9ac426b4a37/IMG_20180110_144444.jpg" class="">
<img src="/posts/c9ac426b4a37/IMG_20180110_144522.jpg" class="">

<img src="/posts/c9ac426b4a37/IMG_20180110_144539.jpg" class="">

<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><img src="/posts/c9ac426b4a37/IMG_20180110_145536.jpg" class="">

<h3 id="南桥和CPU"><a href="#南桥和CPU" class="headerlink" title="南桥和CPU"></a>南桥和CPU</h3><img src="/posts/c9ac426b4a37/IMG_20180110_145709.jpg" class="">

<p>外壳的做工很好,板子只有一颗固定螺丝</p>
<img src="/posts/c9ac426b4a37/IMG_20180110_150530.jpg" class="">

<p>安装完成</p>
<img src="/posts/c9ac426b4a37/IMG_20180110_150808.jpg" class="">
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派pi和root账户密码</title>
    <url>/posts/0b5febe6de76/</url>
    <content><![CDATA[<h2 id="pi账户"><a href="#pi账户" class="headerlink" title="pi账户"></a>pi账户</h2><p>pi是树莓派的默认账户，默认密码为 raspberry</p>
<p>修改默认密码</p>
<p><code>sudo raspi-config</code></p>
<img src="/posts/0b5febe6de76/2018-03-11-221228_655x390_scrot.png" class="">

<p>选择的一项 Change User Password，输入两次新密码即可完成密码修改</p>
<img src="/posts/0b5febe6de76/2018-03-11-221635_655x390_scrot.png" class="">

<h2 id="root账户"><a href="#root账户" class="headerlink" title="root账户"></a>root账户</h2><p>树莓派的root账户在默认情况下是禁用的，且密码为空，所以root账户在未启用时，无论输入什么密码均是错误密码</p>
<p>设置root密码</p>
<p><code>sudo passwd root</code></p>
<p>输入两次新设置的密码后提示密码更新成功</p>
<img src="/posts/0b5febe6de76/2018-03-11-222638_655x390_scrot.png" class="">


<h2 id="pi和root账户切换"><a href="#pi和root账户切换" class="headerlink" title="pi和root账户切换"></a>pi和root账户切换</h2><p>输入</p>
<p><code>su root</code></p>
<p>和密码后便可登录root账户</p>
<p>输入</p>
<p><code>su pi</code></p>
<p>后便可切换到pi账户</p>
<h2 id="如何锁定root账户"><a href="#如何锁定root账户" class="headerlink" title="如何锁定root账户"></a>如何锁定root账户</h2><p>输入</p>
<p><code>sudo passwd --lock root</code></p>
<p>锁定root账户后，我们再尝试用root账户登录，会提示Authentication failure(验证失败)</p>
<p>当我们输入</p>
<p><code>sudo passwd --unlock root</code></p>
<p>后，便可解锁root账户</p>
<p>再次登录root账户成功</p>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派如何关闭显示输出？</title>
    <url>/posts/25aa1f481aea/</url>
    <content><![CDATA[<h2 id="一、尝试"><a href="#一、尝试" class="headerlink" title="一、尝试"></a>一、尝试</h2><p>树莓派通过hdmi连接了一块1920*1080的屏幕，平时时竖屏放置，用来显示日历和其他一些信息，树莓派7*24小时运行, 导致屏幕一直处于工作状态，所以我打算只在一定的时间内进行显示输出</p>
<p>在百度上搜索了如何休眠之类的方法，找到可以通过<code>xset</code>的相关命令使树莓派进入休眠或是唤醒</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 强制进入休眠</span><br><span class="line">sudo xset dpms force off</span><br><span class="line">// 强制唤醒</span><br><span class="line">sudo xset dpms force on</span><br></pre></td></tr></table></figure>

<p>但是在我尝试强制进入休眠时，屏幕只是短暂黑了下屏，再次恢复正常，并不行，不知道哪里出了问题，尝试重新写入系统镜像，用一个新系统试下</p>
<p>新系统启动后屏幕变回了默认的横屏模式，神奇的事发生了，这时再执行强制进入休眠，竟然成功了，当鼠标移动可以正常唤醒，可是当我重启设置了启动时，旋转90deg时，休眠命令再次失效了，多次在横屏竖屏切换尝试了几次，竖屏下都不行，只有横屏下休眠命令可以正常工作，看来是个bug（似乎之前竖屏下，自动休眠就没有正常工作过，应该也是这个原因导致的）</p>
<p>虽然在横屏模式下可以实现命令休眠，但是发现屏幕并没有熄灭，好像只是换了一个黑色的屏保，这点与预期有差距，我们是想让显示屏熄灭，进入待机状态</p>
<p>之后又百度了很久，没有发现什么好的办法。只得转到google上继续查找，最终找到了turn off hdmi的相关命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 关闭显示输出</span><br><span class="line">sudo vcgencmd display_power 0</span><br><span class="line">// 开启显示输出</span><br><span class="line">sudo vcgencmd display_power 1</span><br></pre></td></tr></table></figure>

<p>运行关闭显示输出命令后，屏幕熄灭、进入待机状态，此时树莓派依然是正常工作状态，如果你通过vnc连接树莓派，会发现一切如常，说明这个命令是在硬件层面关闭了显示输出</p>
<h2 id="二、定时任务"><a href="#二、定时任务" class="headerlink" title="二、定时任务"></a>二、定时任务</h2><p>编辑定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo crontab -e</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 每天7:30开启显示</span><br><span class="line">30 7 * * * vcgencmd display_power 1</span><br><span class="line"></span><br><span class="line"># 周一至周五每天8点关闭显示</span><br><span class="line">0 8 * * 1-5 vcgencmd display_power 0</span><br><span class="line"></span><br><span class="line"># 周一至周五每天19点开启显示</span><br><span class="line">0 19 * * 1-5 vcgencmd display_power 1</span><br><span class="line"></span><br><span class="line"># 每天0:30点关闭显示</span><br><span class="line">30 0 * * * vcgencmd display_power 0</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派EC20模块联网</title>
    <url>/posts/3c0ad28a2fa4/</url>
    <content><![CDATA[<h2 id="一、EC20模块"><a href="#一、EC20模块" class="headerlink" title="一、EC20模块"></a>一、EC20模块</h2><p>模块有两个usb接口，其中靠近SIM卡的是电源接口，如果没有接独立供电接口的话，可能会导致板子发热，不稳定</p>
<img src="/posts/3c0ad28a2fa4/01.jpg" class="">

<h2 id="二、连接模块"><a href="#二、连接模块" class="headerlink" title="二、连接模块"></a>二、连接模块</h2><p>连接usb数据线、usb电源</p>
<p>执行<code>lsusb</code>，可以看到已经连接成功</p>
<img src="/posts/3c0ad28a2fa4/2022-07-31-02-03-22.png" class="">

<h2 id="三、拨号联网"><a href="#三、拨号联网" class="headerlink" title="三、拨号联网"></a>三、拨号联网</h2><h3 id="1-安装-wvdial"><a href="#1-安装-wvdial" class="headerlink" title="1.安装 wvdial"></a>1.安装 <code>wvdial</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install wvdial</span><br></pre></td></tr></table></figure>

<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/wvdial.conf</span><br></pre></td></tr></table></figure>

<p>这里使用的是移动sim卡</p>
<img src="/posts/3c0ad28a2fa4/2022-07-31-11-12-43.png" class="">

<h3 id="3-连接"><a href="#3-连接" class="headerlink" title="3. 连接"></a>3. 连接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo wvdial 4g</span><br></pre></td></tr></table></figure>

<img src="/posts/3c0ad28a2fa4/2022-07-31-11-17-10.png" class="">

<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><p>再开一个终端，输入 <code>ip router</code> 查看当前ip路由</p>
<img src="/posts/3c0ad28a2fa4/2022-07-31-14-03-17.png" class="">

<p>执行 <code>sudo ip route add default via 10.64.64.64</code>, 将ppp0添加作默认路由</p>
<img src="/posts/3c0ad28a2fa4/2022-07-31-11-50-02.png" class="">

<p>ping测试</p>
<img src="/posts/3c0ad28a2fa4/2022-07-31-11-51-17.png" class="">

<h2 id="四、发送短信"><a href="#四、发送短信" class="headerlink" title="四、发送短信"></a>四、发送短信</h2><h3 id="安装gammu"><a href="#安装gammu" class="headerlink" title="安装gammu"></a>安装gammu</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gammu</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gammu-config</span><br></pre></td></tr></table></figure>

<p>端口port设置为<code>/dev/ttyUSB3</code></p>
<img src="/posts/3c0ad28a2fa4/2022-07-30-16-55-32.png" class="">

<h3 id="识别设备"><a href="#识别设备" class="headerlink" title="识别设备"></a>识别设备</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gammu identify</span><br></pre></td></tr></table></figure>

<img src="/posts/3c0ad28a2fa4/2022-07-30-17-02-47.png" class="">

<h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gammu sendsms TEXT 手机号 -text &quot;这是一条短信，from raspi&quot; -unicode</span><br></pre></td></tr></table></figure>

<img src="/posts/3c0ad28a2fa4/2022-07-30-17-14-23.png" class="">
]]></content>
      <tags>
        <tag>树莓派</tag>
        <tag>EC20模块</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派使用nodejs驱动ssd1306 128*64 oled显示屏</title>
    <url>/posts/be3e0b7d1ca7/</url>
    <content><![CDATA[<h2 id="一、oled屏幕"><a href="#一、oled屏幕" class="headerlink" title="一、oled屏幕"></a>一、oled屏幕</h2><p>分辨率： 128 * 64<br>尺寸：0.96英寸<br>驱动芯片：ssd1306<br>电压：3.3~5V<br>功耗：0.06w<br>寿命：16000h<br>显示：双色（黄、蓝）<br>字库：无内置字库（软件控制显示）<br>通信： 4线spi&#x2F;i2c（默认spi，使用i2c需调整相应屏后电阻）</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 针脚</span><br><span class="line">GND ------- 接地</span><br><span class="line">VCC ------- 3.3 ~ 5V</span><br><span class="line">D0  ------- 时钟线</span><br><span class="line">D1  ------- 数据线</span><br><span class="line">RES ------- 复位（低电平有效）</span><br><span class="line">DC  ------- spi 通信 data/command 选择；i2c通信时设置i2c地址</span><br><span class="line">cs  ------- 片选（spi通信，低电平有效）</span><br></pre></td></tr></table></figure>

<img src="/posts/be3e0b7d1ca7/IMG_20210111_220337.jpg" class="">
<img src="/posts/be3e0b7d1ca7/IMG_20210111_220051.jpg" class="">

<h2 id="SPI通信"><a href="#SPI通信" class="headerlink" title="SPI通信"></a>SPI通信</h2><p>SPI(Serial Peripheral Interface) 串行外设接口。 以主从方式进行工作，一台master主机可以连接多台slave从机，通过CS片选可以指定选中的从机。通常为4线或3线（单向传输数据）</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 4wire SPI</span><br><span class="line">SCLK ------ 时钟</span><br><span class="line">MOSI ------ Master Out Slave Input</span><br><span class="line">MISO ------ Maset Input Slave Out</span><br><span class="line">CS   ------ 片选 </span><br></pre></td></tr></table></figure>

<h2 id="二、连接raspberrypi"><a href="#二、连接raspberrypi" class="headerlink" title="二、连接raspberrypi"></a>二、连接raspberrypi</h2><p>1.启用spi</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure>

<p>找到advanced options 下的spi，选择启用</p>
<p>2.连接</p>
<img src="/posts/be3e0b7d1ca7/raspberry-pi-pin.png" class="">

<h2 id="三、点亮"><a href="#三、点亮" class="headerlink" title="三、点亮"></a>三、点亮</h2><p>在github上查找相关ssd1306的相关js驱动，找到一个可用的驱动，为防止丢失，已Fork <a href="https://github.com/yancoding/ssd1306-spi">https://github.com/yancoding/ssd1306-spi</a></p>
<p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rpio = <span class="built_in">require</span>(<span class="string">&quot;rpio&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SSD1306</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">    width,</span></span><br><span class="line"><span class="params">    height,</span></span><br><span class="line"><span class="params">    resetPin,</span></span><br><span class="line"><span class="params">    dcPin,</span></span><br><span class="line"><span class="params">    spiChip,</span></span><br><span class="line"><span class="params">    rpio</span></span><br><span class="line"><span class="params">  &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">EXTERNAL_VCC</span> = <span class="number">0x1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SWITCH_CAP_VCC</span> = <span class="number">0x2</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_LOW_COLUMN</span> = <span class="number">0x00</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_HIGH_COLUMN</span> = <span class="number">0x10</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_MEMORY_MODE</span> = <span class="number">0x20</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_COL_ADDRESS</span> = <span class="number">0x21</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_PAGE_ADDRESS</span> = <span class="number">0x22</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">RIGHT_HORIZ_SCROLL</span> = <span class="number">0x26</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">LEFT_HORIZ_SCROLL</span> = <span class="number">0x27</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">VERT_AND_RIGHT_HORIZ_SCROLL</span> = <span class="number">0x29</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">VERT_AND_LEFT_HORIZ_SCROLL</span> = <span class="number">0x2A</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">DEACTIVATE_SCROLL</span> = <span class="number">0x2E</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ACTIVATE_SCROLL</span> = <span class="number">0x2F</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_START_LINE</span> = <span class="number">0x40</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_CONTRAST</span> = <span class="number">0x81</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">CHARGE_PUMP</span> = <span class="number">0x8D</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SEG_REMAP</span> = <span class="number">0xA0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_VERT_SCROLL_AREA</span> = <span class="number">0xA3</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">DISPLAY_ALL_ON_RESUME</span> = <span class="number">0xA4</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">DISPLAY_ALL_ON</span> = <span class="number">0xA5</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">NORMAL_DISPLAY</span> = <span class="number">0xA6</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">INVERT_DISPLAY</span> = <span class="number">0xA7</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">DISPLAY_OFF</span> = <span class="number">0xAE</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">DISPLAY_ON</span> = <span class="number">0xAF</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">COM_SCAN_INC</span> = <span class="number">0xC0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">COM_SCAN_DEC</span> = <span class="number">0xC8</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_DISPLAY_OFFSET</span> = <span class="number">0xD3</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_COM_PINS</span> = <span class="number">0xDA</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_VCOM_DETECT</span> = <span class="number">0xDB</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_DISPLAY_CLOCK_DIV</span> = <span class="number">0xD5</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_PRECHARGE</span> = <span class="number">0xD9</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_MULTIPLEX</span> = <span class="number">0xA8</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">MEMORY_MODE_HORIZ</span> = <span class="number">0x00</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">MEMORY_MODE_VERT</span> = <span class="number">0x01</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">MEMORY_MODE_PAGE</span> = <span class="number">0x02</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> options = &#123;</span><br><span class="line">      <span class="attr">gpiomem</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">mapping</span>: <span class="string">&quot;gpio&quot;</span>,</span><br><span class="line">      ...rpio</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_screenWidth</span> = width;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_screenHeight</span> = height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_resetPin</span> = resetPin;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_dcPin</span> = dcPin;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_spiChip</span> = spiChip;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rpioOptions</span> = options;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_screenBuffer</span> = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>((width * height) / <span class="number">8</span>).<span class="title function_">fill</span>(<span class="number">0x00</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    rpio.<span class="title function_">init</span>(<span class="variable language_">this</span>.<span class="property">_rpioOptions</span>);</span><br><span class="line">    rpio.<span class="title function_">spiBegin</span>();</span><br><span class="line">    rpio.<span class="title function_">spiChipSelect</span>(<span class="variable language_">this</span>.<span class="property">_spiChip</span>);</span><br><span class="line">    <span class="comment">// 8MHz</span></span><br><span class="line">    rpio.<span class="title function_">spiSetClockDivider</span>(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">    rpio.<span class="title function_">open</span>(<span class="variable language_">this</span>.<span class="property">_resetPin</span>, rpio.<span class="property">OUTPUT</span>, rpio.<span class="property">HIGH</span>);</span><br><span class="line">    rpio.<span class="title function_">open</span>(<span class="variable language_">this</span>.<span class="property">_dcPin</span>, rpio.<span class="property">OUTPUT</span>, rpio.<span class="property">LOW</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Init the OLED screen</span></span><br><span class="line">    rpio.<span class="title function_">msleep</span>(<span class="number">0.01</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">reset</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">DISPLAY_OFF</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_DISPLAY_CLOCK_DIV</span>, <span class="number">0x80</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup the right screen size</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_screenHeight</span> === <span class="number">64</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_MULTIPLEX</span>, <span class="number">0x3F</span>]));</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_COM_PINS</span>, <span class="number">0x12</span>]));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_MULTIPLEX</span>, <span class="number">0x1F</span>]));</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_COM_PINS</span>, <span class="number">0x02</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_DISPLAY_OFFSET</span>, <span class="number">0x00</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_START_LINE</span> | <span class="number">0x00</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">CHARGE_PUMP</span>, <span class="number">0x14</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_MEMORY_MODE</span>, <span class="number">0x00</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SEG_REMAP</span> | <span class="number">0x01</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">COM_SCAN_DEC</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_CONTRAST</span>, <span class="number">0x8f</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_PRECHARGE</span>, <span class="number">0xf1</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_VCOM_DETECT</span>, <span class="number">0x40</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">DISPLAY_ALL_ON_RESUME</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">NORMAL_DISPLAY</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">DISPLAY_ON</span>]));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">clearDisplay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_screenBuffer</span>.<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">invertDisplay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">INVERT_DISPLAY</span>]));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">normalDisplay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">NORMAL_DISPLAY</span>]));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_MEMORY_MODE</span>, <span class="variable language_">this</span>.<span class="property">MEMORY_MODE_HORIZ</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_PAGE_ADDRESS</span>, <span class="number">0x00</span>, <span class="number">0x07</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_COL_ADDRESS</span>, <span class="number">0x00</span>, <span class="number">0x7f</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">DISPLAY_ON</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">data</span>(<span class="variable language_">this</span>.<span class="property">_screenBuffer</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">drawPixel</span>(<span class="params">x, y, on</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; <span class="variable language_">this</span>.<span class="property">_screenWidth</span> - <span class="number">1</span> || y &lt; <span class="number">0</span> || y &gt; <span class="variable language_">this</span>.<span class="property">_screenHeight</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> page = <span class="title class_">Math</span>.<span class="title function_">floor</span>(y / <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">let</span> offset = y % <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (on) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_screenBuffer</span>[page * <span class="variable language_">this</span>.<span class="property">_screenWidth</span> + x] |= (<span class="number">0x1</span> &lt;&lt; offset);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_screenBuffer</span>[page * <span class="variable language_">this</span>.<span class="property">_screenWidth</span> + x] &amp;= ((<span class="number">0x1</span> &lt;&lt; offset) ^ <span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    rpio.<span class="title function_">write</span>(<span class="variable language_">this</span>.<span class="property">_resetPin</span>, rpio.<span class="property">LOW</span>);</span><br><span class="line">    rpio.<span class="title function_">msleep</span>(<span class="number">10</span>);</span><br><span class="line">    rpio.<span class="title function_">write</span>(<span class="variable language_">this</span>.<span class="property">_resetPin</span>, rpio.<span class="property">HIGH</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">command</span>(<span class="params">buffer</span>) &#123;</span><br><span class="line">    rpio.<span class="title function_">spiWrite</span>(buffer, buffer.<span class="property">length</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">data</span>(<span class="params">buffer</span>) &#123;</span><br><span class="line">    <span class="comment">// Set DC to high to write data</span></span><br><span class="line">    rpio.<span class="title function_">write</span>(<span class="variable language_">this</span>.<span class="property">_dcPin</span>, rpio.<span class="property">HIGH</span>);</span><br><span class="line"></span><br><span class="line">    rpio.<span class="title function_">spiWrite</span>(buffer, buffer.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    rpio.<span class="title function_">write</span>(<span class="variable language_">this</span>.<span class="property">_dcPin</span>, rpio.<span class="property">LOW</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">end</span>(<span class="params"></span>) &#123;</span><br><span class="line">    rpio.<span class="title function_">spiEnd</span>();</span><br><span class="line">    rpio.<span class="title function_">close</span>(<span class="variable language_">this</span>.<span class="property">_resetPin</span>, rpio.<span class="property">PIN_RESET</span>);</span><br><span class="line">    rpio.<span class="title function_">close</span>(<span class="variable language_">this</span>.<span class="property">_dcPin</span>, rpio.<span class="property">PIN_RESET</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">SSD1306</span>;</span><br></pre></td></tr></table></figure>

<p>使用该驱动</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SSD1306</span> = <span class="built_in">require</span>(<span class="string">&#x27;ssd1306&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> rpio = <span class="built_in">require</span>(<span class="string">&quot;rpio&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> ssd1306 = <span class="keyword">new</span> <span class="title class_">SSD1306</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">128</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">64</span>,</span><br><span class="line">  <span class="attr">resetPin</span>: <span class="number">24</span>,</span><br><span class="line">  <span class="attr">dcPin</span>: <span class="number">23</span>,</span><br><span class="line">  <span class="attr">spiChip</span>: <span class="number">0</span>,</span><br><span class="line">  rpio,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">ssd1306.<span class="title function_">init</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依次点亮每个点阵</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">128</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; <span class="number">64</span>; j++) &#123;</span><br><span class="line">    ssd1306.<span class="title function_">drawPixel</span>(i, j, <span class="literal">true</span>)</span><br><span class="line">    ssd1306.<span class="title function_">draw</span>()</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果可以依次点亮屏幕上的每一点，说明oled一切正常，可以尝试做些其他的事情了</p>
<h2 id="四、一个像素点是如何点亮的？"><a href="#四、一个像素点是如何点亮的？" class="headerlink" title="四、一个像素点是如何点亮的？"></a>四、一个像素点是如何点亮的？</h2><p>其实oled与大多数的点阵屏幕点亮原理都很类似，具体还要看下使用手册</p>
<p>oled 水平共有64个共阴极，那么如果在某一像素点上加上高电平，即可点亮该点</p>
<p>128 * 64 共有64行，128列，64行在数据层分为8页，在第一页，也就是128 * 8的区域，如果在第一列写入的数据为0xff，即二进制的 <code>11111111</code>,则会点亮第一页第一列的8个像素点，上为高位D0，下为低位D7。</p>
<p>所以屏幕的显存为128 * 8 byte，通过ssd1306的指令写入显存，即可显示我们要展示的内容</p>
<p>传统做法是对常用的字符生成不通大小的点阵数据，也就是所谓的字库，生成方式称为字体取模，这种方式有一定的局限性，我们可以考虑采用另一种方式来显示我们想要的任何图形</p>
<h2 id="五、借助canvas绘图"><a href="#五、借助canvas绘图" class="headerlink" title="五、借助canvas绘图"></a>五、借助canvas绘图</h2><p>oled屏幕的尺寸是固定的128 * 64尺寸，这点非常类似canvas的画布，我们因此可以将屏幕当成canvas的画布</p>
<p>首先创建一个屏幕大小的画布, 然后借助canvas的api可以绘制出我们想要的图案，再取出画布上的像素数据，转换为相应的数据格式，写入oled的显存，即可在屏幕上展示画布上的图案</p>
<p>注意这里由于屏幕每个点只有两个状态，亮或暗，因此我们在画布上绘制时，只使用黑色绘制即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rpio = <span class="built_in">require</span>(<span class="string">&quot;rpio&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  createCanvas,</span><br><span class="line">  loadImage</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SSD1306</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">    width,</span></span><br><span class="line"><span class="params">    height,</span></span><br><span class="line"><span class="params">    resetPin,</span></span><br><span class="line"><span class="params">    dcPin,</span></span><br><span class="line"><span class="params">    spiChip,</span></span><br><span class="line"><span class="params">    rpio</span></span><br><span class="line"><span class="params">  &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">EXTERNAL_VCC</span> = <span class="number">0x1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SWITCH_CAP_VCC</span> = <span class="number">0x2</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_LOW_COLUMN</span> = <span class="number">0x00</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_HIGH_COLUMN</span> = <span class="number">0x10</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_MEMORY_MODE</span> = <span class="number">0x20</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_COL_ADDRESS</span> = <span class="number">0x21</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_PAGE_ADDRESS</span> = <span class="number">0x22</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">RIGHT_HORIZ_SCROLL</span> = <span class="number">0x26</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">LEFT_HORIZ_SCROLL</span> = <span class="number">0x27</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">VERT_AND_RIGHT_HORIZ_SCROLL</span> = <span class="number">0x29</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">VERT_AND_LEFT_HORIZ_SCROLL</span> = <span class="number">0x2A</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">DEACTIVATE_SCROLL</span> = <span class="number">0x2E</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ACTIVATE_SCROLL</span> = <span class="number">0x2F</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_START_LINE</span> = <span class="number">0x40</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_CONTRAST</span> = <span class="number">0x81</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">CHARGE_PUMP</span> = <span class="number">0x8D</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SEG_REMAP</span> = <span class="number">0xA0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_VERT_SCROLL_AREA</span> = <span class="number">0xA3</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">DISPLAY_ALL_ON_RESUME</span> = <span class="number">0xA4</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">DISPLAY_ALL_ON</span> = <span class="number">0xA5</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">NORMAL_DISPLAY</span> = <span class="number">0xA6</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">INVERT_DISPLAY</span> = <span class="number">0xA7</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">DISPLAY_OFF</span> = <span class="number">0xAE</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">DISPLAY_ON</span> = <span class="number">0xAF</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">COM_SCAN_INC</span> = <span class="number">0xC0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">COM_SCAN_DEC</span> = <span class="number">0xC8</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_DISPLAY_OFFSET</span> = <span class="number">0xD3</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_COM_PINS</span> = <span class="number">0xDA</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_VCOM_DETECT</span> = <span class="number">0xDB</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_DISPLAY_CLOCK_DIV</span> = <span class="number">0xD5</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_PRECHARGE</span> = <span class="number">0xD9</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SET_MULTIPLEX</span> = <span class="number">0xA8</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">MEMORY_MODE_HORIZ</span> = <span class="number">0x00</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">MEMORY_MODE_VERT</span> = <span class="number">0x01</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">MEMORY_MODE_PAGE</span> = <span class="number">0x02</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> options = &#123;</span><br><span class="line">      <span class="attr">gpiomem</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">mapping</span>: <span class="string">&quot;gpio&quot;</span>,</span><br><span class="line">      ...rpio</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_screenWidth</span> = width;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_screenHeight</span> = height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_resetPin</span> = resetPin;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_dcPin</span> = dcPin;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_spiChip</span> = spiChip;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rpioOptions</span> = options;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_screenBuffer</span> = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>((width * height) / <span class="number">8</span>).<span class="title function_">fill</span>(<span class="number">0x00</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_ctx</span> = <span class="title function_">createCanvas</span>(<span class="number">128</span>, <span class="number">64</span>).<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_ctx</span>.<span class="property">fillStyle</span> = <span class="string">&#x27;rgba(255, 255, 255, 1)&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_ctx</span>.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">128</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    rpio.<span class="title function_">init</span>(<span class="variable language_">this</span>.<span class="property">_rpioOptions</span>);</span><br><span class="line">    rpio.<span class="title function_">spiBegin</span>();</span><br><span class="line">    rpio.<span class="title function_">spiChipSelect</span>(<span class="variable language_">this</span>.<span class="property">_spiChip</span>);</span><br><span class="line">    <span class="comment">// 8MHz</span></span><br><span class="line">    rpio.<span class="title function_">spiSetClockDivider</span>(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">    rpio.<span class="title function_">open</span>(<span class="variable language_">this</span>.<span class="property">_resetPin</span>, rpio.<span class="property">OUTPUT</span>, rpio.<span class="property">HIGH</span>);</span><br><span class="line">    rpio.<span class="title function_">open</span>(<span class="variable language_">this</span>.<span class="property">_dcPin</span>, rpio.<span class="property">OUTPUT</span>, rpio.<span class="property">LOW</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Init the OLED screen</span></span><br><span class="line">    rpio.<span class="title function_">msleep</span>(<span class="number">0.01</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">reset</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">DISPLAY_OFF</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_DISPLAY_CLOCK_DIV</span>, <span class="number">0x80</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup the right screen size</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_screenHeight</span> === <span class="number">64</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_MULTIPLEX</span>, <span class="number">0x3F</span>]));</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_COM_PINS</span>, <span class="number">0x12</span>]));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_MULTIPLEX</span>, <span class="number">0x1F</span>]));</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_COM_PINS</span>, <span class="number">0x02</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_DISPLAY_OFFSET</span>, <span class="number">0x00</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_START_LINE</span> | <span class="number">0x00</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">CHARGE_PUMP</span>, <span class="number">0x14</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_MEMORY_MODE</span>, <span class="number">0x00</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SEG_REMAP</span> | <span class="number">0x01</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">COM_SCAN_DEC</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_CONTRAST</span>, <span class="number">0x8f</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_PRECHARGE</span>, <span class="number">0xf1</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_VCOM_DETECT</span>, <span class="number">0x40</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">DISPLAY_ALL_ON_RESUME</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">NORMAL_DISPLAY</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">DISPLAY_ON</span>]));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getContext</span>(<span class="params">contextID</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (contextID === <span class="string">&#x27;2d&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_ctx</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;getConText(contextID)参数错误&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">clearDisplay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_screenBuffer</span>.<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">invertDisplay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">INVERT_DISPLAY</span>]));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">normalDisplay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">NORMAL_DISPLAY</span>]));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_MEMORY_MODE</span>, <span class="variable language_">this</span>.<span class="property">MEMORY_MODE_HORIZ</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_PAGE_ADDRESS</span>, <span class="number">0x00</span>, <span class="number">0x07</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">SET_COL_ADDRESS</span>, <span class="number">0x00</span>, <span class="number">0x7f</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">DISPLAY_ON</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">data</span>(<span class="variable language_">this</span>.<span class="property">_screenBuffer</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">drawPixel</span>(<span class="params">x, y, on</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; <span class="variable language_">this</span>.<span class="property">_screenWidth</span> - <span class="number">1</span> || y &lt; <span class="number">0</span> || y &gt; <span class="variable language_">this</span>.<span class="property">_screenHeight</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> page = <span class="title class_">Math</span>.<span class="title function_">floor</span>(y / <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">let</span> offset = y % <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (on) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_screenBuffer</span>[page * <span class="variable language_">this</span>.<span class="property">_screenWidth</span> + x] |= (<span class="number">0x1</span> &lt;&lt; offset);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_screenBuffer</span>[page * <span class="variable language_">this</span>.<span class="property">_screenWidth</span> + x] &amp;= ((<span class="number">0x1</span> &lt;&lt; offset) ^ <span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    rpio.<span class="title function_">write</span>(<span class="variable language_">this</span>.<span class="property">_resetPin</span>, rpio.<span class="property">LOW</span>);</span><br><span class="line">    rpio.<span class="title function_">msleep</span>(<span class="number">10</span>);</span><br><span class="line">    rpio.<span class="title function_">write</span>(<span class="variable language_">this</span>.<span class="property">_resetPin</span>, rpio.<span class="property">HIGH</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">command</span>(<span class="params">buffer</span>) &#123;</span><br><span class="line">    rpio.<span class="title function_">spiWrite</span>(buffer, buffer.<span class="property">length</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">data</span>(<span class="params">buffer</span>) &#123;</span><br><span class="line">    <span class="comment">// Set DC to high to write data</span></span><br><span class="line">    rpio.<span class="title function_">write</span>(<span class="variable language_">this</span>.<span class="property">_dcPin</span>, rpio.<span class="property">HIGH</span>);</span><br><span class="line"></span><br><span class="line">    rpio.<span class="title function_">spiWrite</span>(buffer, buffer.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    rpio.<span class="title function_">write</span>(<span class="variable language_">this</span>.<span class="property">_dcPin</span>, rpio.<span class="property">LOW</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">end</span>(<span class="params"></span>) &#123;</span><br><span class="line">    rpio.<span class="title function_">spiEnd</span>();</span><br><span class="line">    rpio.<span class="title function_">close</span>(<span class="variable language_">this</span>.<span class="property">_resetPin</span>, rpio.<span class="property">PIN_RESET</span>);</span><br><span class="line">    rpio.<span class="title function_">close</span>(<span class="variable language_">this</span>.<span class="property">_dcPin</span>, rpio.<span class="property">PIN_RESET</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">scroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">RIGHT_HORIZ_SCROLL</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">command</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="variable language_">this</span>.<span class="property">ACTIVATE_SCROLL</span>]));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">data</span>(<span class="variable language_">this</span>.<span class="property">_screenBuffer</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">drawToDisplay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pixelArray = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> page = <span class="number">0</span>; page &lt; <span class="number">8</span>; page++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; <span class="number">128</span>; col++) &#123;</span><br><span class="line">        <span class="keyword">const</span> imageData = <span class="variable language_">this</span>.<span class="property">_ctx</span>.<span class="title function_">getImageData</span>(col, page * <span class="number">8</span>, <span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">let</span> byte = <span class="number">0x00</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; imageData.<span class="property">data</span>.<span class="property">length</span>; i += <span class="number">4</span>, j++) &#123;</span><br><span class="line">          <span class="keyword">const</span> r = imageData.<span class="property">data</span>[i]</span><br><span class="line">          <span class="keyword">const</span> g = imageData.<span class="property">data</span>[i + <span class="number">1</span>]</span><br><span class="line">          <span class="keyword">const</span> b = imageData.<span class="property">data</span>[i + <span class="number">2</span>]</span><br><span class="line">          <span class="keyword">const</span> a = imageData.<span class="property">data</span>[i + <span class="number">3</span>]</span><br><span class="line">          <span class="keyword">const</span> average = <span class="number">0.21</span> * r + <span class="number">0.72</span> * g + <span class="number">0.07</span> * b</span><br><span class="line">          <span class="keyword">const</span> bit = average &lt; <span class="number">128</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">          byte += bit &lt;&lt; j</span><br><span class="line">        &#125;</span><br><span class="line">        pixelArray.<span class="title function_">push</span>(byte)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_screenBuffer</span> = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(pixelArray)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">draw</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">SSD1306</span>;</span><br></pre></td></tr></table></figure>

<p>尝试绘制文字</p>
<pre><code class="js">// 引入
const SSD1306 = require(&#39;ssd1306&#39;)
const rpio = require(&quot;rpio&quot;)

// 创建实例
const ssd1306 = new SSD1306(&#123;
  width: 128,
  height: 64,
  resetPin: 24,
  dcPin: 23,
  spiChip: 0,
  rpio,
&#125;)

// 初始化
ssd1306.init()

// 获取canvas 2d 上下文
const ctx = ssd1306.getContext(&#39;2d&#39;)

ctx.strokeStyle = &#39;#000&#39;
ctx.strokeRect(0, 0, 128, 64)

ctx.font = &#39;18px arial&#39;
ctx.fillStyle = &#39;rgba(0, 0, 0, 1)&#39;
ctx.textAlign = &#39;center&#39;
ctx.fillText(`Hello World`, 64, 32)
ssd1306.drawToDisplay()
</code></pre>
]]></content>
      <tags>
        <tag>树莓派</tag>
        <tag>nodejs</tag>
        <tag>canvas</tag>
        <tag>ssd1306</tag>
        <tag>oled</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派如何截屏</title>
    <url>/posts/5ccd0e4749cf/</url>
    <content><![CDATA[<h2 id="安装scrot"><a href="#安装scrot" class="headerlink" title="安装scrot"></a>安装scrot</h2><p>在终端里输入命令:</p>
<p><code>scrot -v</code></p>
<p>查看是否安装了scrot, 已经安装了scrot的会显示其版本信息</p>
<img src="/posts/5ccd0e4749cf/QQ%E6%88%AA%E5%9B%BE20180308155232.jpg" class="">

<p>没有安装的话，输入以下命令进行安装：</p>
<p><code>sudo apt-get install scrot</code></p>
<h2 id="查看scrot帮助"><a href="#查看scrot帮助" class="headerlink" title="查看scrot帮助"></a>查看scrot帮助</h2><p>安装完成后，输入命令</p>
<p><code>scrot -h</code></p>
<p>可以查看scrot的使用帮助</p>
<img src="/posts/5ccd0e4749cf/QQ%E6%88%AA%E5%9B%BE20180308160435.jpg" class="">


<p>4.scrot的常用命令</p>
<p>截取整个窗口:</p>
<p><code>sudo scrot</code></p>
<p>效果与键盘上的截屏键Print Scr Sysrq相同</p>
<p>默认保存在当前目录下</p>
<p>默认文件名 2018-03-08-161715_1824x984_scrot.png</p>
<p>自命名截图：</p>
<p><code>sudo scrot 123.png</code></p>
<p>截取的图片会以文件名123.png保存到当前目录</p>
<p>其他命令：</p>
<p>Usage : scrot [OPTIONS]… [FILE]<br>-h, –help 查看帮助<br>-v, –version 获取版本信息<br>-d, –delay NUM 延时NUM秒后截屏<br>-s, –select 鼠标选择一个区域后截屏<br>-u, –focused 截取当前活动窗口(可以配合 -d 延时后改变活动窗口) </p>
<p><strong>注意</strong>：scrot只能在窗口存在时才能使用，当putty以ssh连接树莓派时，输入命令sudo scrot会报错 <code>giblib error: Can&#39;t open X display. It *is* running, yeah?</code></p>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派安装mongodb</title>
    <url>/posts/bf611258a597/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mongodb</span><br></pre></td></tr></table></figure>

<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>用以上命令安装完成后，执行 <code>mongo</code> 命令，并没有连接成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MongoDB shell version: 2.4.14</span><br><span class="line">connecting to: test</span><br><span class="line">Wed Jul 17 22:40:55.765 Error: couldn&#x27;t connect to server 127.0.0.1:27017 at src/mongo/shell/mongo.js:145</span><br><span class="line">exception: connect failed</span><br></pre></td></tr></table></figure>

<p>查看安装打印的信息中，有这么一条 <code>无法创建主目录&quot;/var/lib/mongodb&quot;</code>, 说明 mongodb 缺少权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service mongodb stop</span><br><span class="line">sudo chown -R mongodb:mongodb /var/lib/mongodb</span><br><span class="line">sudo service mongodb start</span><br></pre></td></tr></table></figure>

<p>修改目录权限后再次执行 <code>mongo</code> 命令，显示连接成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MongoDB shell version: 2.4.14</span><br><span class="line">connecting to: test</span><br><span class="line">Welcome to the MongoDB shell.</span><br><span class="line">For interactive help, type &quot;help&quot;.</span><br><span class="line">For more comprehensive documentation, see</span><br><span class="line">        http://docs.mongodb.org/</span><br><span class="line">Questions? Try the support group</span><br><span class="line">        http://groups.google.com/group/mongodb-user</span><br><span class="line">Server has startup warnings:</span><br><span class="line">Wed Jul 17 22:50:05.612 [initandlisten]</span><br><span class="line">Wed Jul 17 22:50:05.612 [initandlisten] ** NOTE: This is a 32 bit MongoDB binary.</span><br><span class="line">Wed Jul 17 22:50:05.612 [initandlisten] **       32 bit builds are limited to less than 2GB of data (or less with --journal).</span><br><span class="line">Wed Jul 17 22:50:05.612 [initandlisten] **       See http://dochub.mongodb.org/core/32bit</span><br><span class="line">Wed Jul 17 22:50:05.612 [initandlisten]</span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派屏幕旋转和触摸旋转</title>
    <url>/posts/40c19e61f591/</url>
    <content><![CDATA[<h2 id="一、屏幕"><a href="#一、屏幕" class="headerlink" title="一、屏幕"></a>一、屏幕</h2><p>这是一块<code>DFROBOT</code>产的5’’ 800x480 TFT 电容屏</p>
<img src="/posts/40c19e61f591/FoQwMT9e2z_oup3m1X9coEFCH2Ct.jpg" class="">

<p>默认是按长边方向显示的，如果竖屏使用的话，就需要调整屏幕方向和触摸方向</p>
<h2 id="二、屏幕旋转"><a href="#二、屏幕旋转" class="headerlink" title="二、屏幕旋转"></a>二、屏幕旋转</h2><p>修改屏幕旋转可以修改启动配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /boot/config.txt</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认</span></span><br><span class="line">display_rotate=0</span><br><span class="line"><span class="comment"># 90deg</span></span><br><span class="line">display_rotate=1</span><br><span class="line"><span class="comment"># 180deg</span></span><br><span class="line">display_rotate=2</span><br><span class="line"><span class="comment"># 270deg</span></span><br><span class="line">display_rotate=3</span><br></pre></td></tr></table></figure>

<p>可以根据需要添加旋转值（顺时针的）</p>
<p>然后重启即可生效<code>sudo shutdown -r now</code></p>
<h2 id="三、触摸旋转"><a href="#三、触摸旋转" class="headerlink" title="三、触摸旋转"></a>三、触摸旋转</h2><p>如果只是屏幕进行了旋转的话，触摸还是保持默认方向，就无法正常操作了，需要调整与屏幕方向一致才行</p>
<p>编辑配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/share/X11/xorg.conf.d/40-libinput.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Match on all types of devices but joysticks</span><br><span class="line">#</span><br><span class="line"># If you want to configure your devices, do not copy this file.</span><br><span class="line"># Instead, use a config snippet that contains something like this:</span><br><span class="line">#</span><br><span class="line"># Section &quot;InputClass&quot;</span><br><span class="line">#   Identifier &quot;something or other&quot;</span><br><span class="line">#   MatchDriver &quot;libinput&quot;</span><br><span class="line">#</span><br><span class="line">#   MatchIsTouchpad &quot;on&quot;</span><br><span class="line">#   ... other Match directives ...</span><br><span class="line">#   Option &quot;someoption&quot; &quot;value&quot;</span><br><span class="line"># EndSection</span><br><span class="line">#</span><br><span class="line"># This applies the option any libinput device also matched by the other</span><br><span class="line"># directives. See the xorg.conf(5) man page for more info on</span><br><span class="line"># matching devices.</span><br><span class="line"></span><br><span class="line">Section &quot;InputClass&quot;</span><br><span class="line">        Identifier &quot;libinput pointer catchall&quot;</span><br><span class="line">        MatchIsPointer &quot;on&quot;</span><br><span class="line">        MatchDevicePath &quot;/dev/input/event*&quot;</span><br><span class="line">        Driver &quot;libinput&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;InputClass&quot;</span><br><span class="line">        Identifier &quot;libinput keyboard catchall&quot;</span><br><span class="line">        MatchIsKeyboard &quot;on&quot;</span><br><span class="line">        MatchDevicePath &quot;/dev/input/event*&quot;</span><br><span class="line">        Driver &quot;libinput&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;InputClass&quot;</span><br><span class="line">        Identifier &quot;libinput touchpad catchall&quot;</span><br><span class="line">        MatchIsTouchpad &quot;on&quot;</span><br><span class="line">        MatchDevicePath &quot;/dev/input/event*&quot;</span><br><span class="line">        Driver &quot;libinput&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;InputClass&quot;</span><br><span class="line">        Identifier &quot;libinput touchscreen catchall&quot;</span><br><span class="line">        # 90deg</span><br><span class="line">        Option &quot;CalibrationMatrix&quot; &quot;0 1 0 -1 0 1 0 0 1&quot;</span><br><span class="line">        MatchIsTouchscreen &quot;on&quot;</span><br><span class="line">        MatchDevicePath &quot;/dev/input/event*&quot;</span><br><span class="line">        Driver &quot;libinput&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;InputClass&quot;</span><br><span class="line">        Identifier &quot;libinput tablet catchall&quot;</span><br><span class="line">        MatchIsTablet &quot;on&quot;</span><br><span class="line">        MatchDevicePath &quot;/dev/input/event*&quot;</span><br><span class="line">        Driver &quot;libinput&quot;</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure>

<p>在<code>libinput touchscreen catchall</code>部分添加一行<code>Option &quot;CalibrationMatrix&quot; &quot;0 1 0 -1 0 1 0 0 1&quot;</code></p>
<p>注意：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 90 deg</span><br><span class="line">Option &quot;CalibrationMatrix&quot; &quot;0 1 0 -1 0 1 0 0 1&quot;</span><br><span class="line"></span><br><span class="line"># 180 deg</span><br><span class="line">Option &quot;CalibrationMatrix&quot; &quot;-1 0 1 0 -1 1 0 0 1&quot;</span><br><span class="line"></span><br><span class="line"># 270 deg</span><br><span class="line">Option &quot;CalibrationMatrix&quot; &quot;0 -1 1 1 0 0 0 0 1&quot;</span><br></pre></td></tr></table></figure>

<p>重启即可</p>
<img src="/posts/40c19e61f591/IMG_20200823_123704.jpg" class="">
]]></content>
      <tags>
        <tag>树莓派</tag>
        <tag>屏幕</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派安装gammu</title>
    <url>/posts/4508ad670cba/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install gammu</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gammu-config</span><br></pre></td></tr></table></figure>

<img src="/posts/4508ad670cba/2020-06-07_151207.gif" class="">

<h2 id="发送短信"><a href="#发送短信" class="headerlink" title="发送短信"></a>发送短信</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gammu sendsms TEXT 19965412404 -TEXT <span class="string">&#x27;from raspberrypi(测试短信)&#x27;</span> -unicode</span><br></pre></td></tr></table></figure>

<img src="/posts/4508ad670cba/2020-06-07_152304.gif" class="">

<img src="/posts/4508ad670cba/2020-06-07_152603.gif" class="">
]]></content>
      <tags>
        <tag>树莓派</tag>
        <tag>EC20模块</tag>
        <tag>gammu</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派开机自动启动chrome浏览器</title>
    <url>/posts/caf5a23a233a/</url>
    <content><![CDATA[<h2 id="1-chrome-命令行启动（不可通过ssh连接，可以尝试在真机，或者vnc连接情况下）"><a href="#1-chrome-命令行启动（不可通过ssh连接，可以尝试在真机，或者vnc连接情况下）" class="headerlink" title="1.chrome 命令行启动（不可通过ssh连接，可以尝试在真机，或者vnc连接情况下）"></a>1.chrome 命令行启动（不可通过ssh连接，可以尝试在真机，或者vnc连接情况下）</h2><p>打开谷歌</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chromium-browser https://google.com</span><br></pre></td></tr></table></figure>

<p>全屏打开谷歌</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chromium-browser --start-fullscreen https://google.com</span><br></pre></td></tr></table></figure>

<p>自助服务模式（kiosk）打开谷歌</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chromium-browser --kiosk https://google.com</span><br></pre></td></tr></table></figure>

<p>注：该模式类似于常见的自主终端机的显示模式， 画面全屏显示，但与普通全屏模式又有不同，如果只有触摸屏的话，用户是无法退出全屏的。</p>
<h2 id="2-树莓派开机自动启动chrome并打开指定的地址"><a href="#2-树莓派开机自动启动chrome并打开指定的地址" class="headerlink" title="2.树莓派开机自动启动chrome并打开指定的地址"></a>2.树莓派开机自动启动chrome并打开指定的地址</h2><p>切换到桌面的自动启动应用配置目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.config/autostart</span><br></pre></td></tr></table></figure>

<p>创建一个自启应用配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch start-chrome.desktop</span><br><span class="line">vi start-chrome.desktop</span><br></pre></td></tr></table></figure>

<p>编辑内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=</span><br><span class="line">Name=</span><br><span class="line">Comment=</span><br><span class="line">Icon=</span><br><span class="line">Exec=chromium-browser --start-fullscreen https://google.com</span><br><span class="line">Terminal=</span><br><span class="line">Type=Application</span><br><span class="line">Categories=</span><br></pre></td></tr></table></figure>

<p>保存重启树莓派，当桌面启动几秒后，便会自动打开chrome</p>
<p>参考文章</p>
<ul>
<li><p><a href="https://blog.csdn.net/szu_Vegetable_Bird/article/details/80231660">树莓派开机自启动chrome浏览器并进入某网址</a></p>
</li>
<li><p><a href="https://peter.sh/experiments/chromium-command-line-switches/">List of Chromium Command Line Switches</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>树莓派</tag>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派相关</title>
    <url>/posts/2324bf4a4c14/</url>
    <content><![CDATA[<h2 id="关于vim"><a href="#关于vim" class="headerlink" title="关于vim"></a>关于vim</h2><p>树莓派自带的vim直接使用会有一些问题，可以尝试进行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure>

<h2 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h2><p> 编辑</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>更改为</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#deb http://raspbian.raspberrypi.org/raspbian/ buster main contrib non-free rpi</span><br><span class="line"># Uncomment line below then &#x27;apt-get update&#x27; to enable &#x27;apt-get source&#x27;</span><br><span class="line">#deb-src http://raspbian.raspberrypi.org/raspbian/ buster main contrib non-free rpi</span><br><span class="line"></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ bullseye main non-free contrib rpi</span><br><span class="line"># Uncomment line below then &#x27;apt-get update&#x27; to enable &#x27;apt-get source&#x27;</span><br><span class="line"># deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ bullseye main non-free contrib rpi</span><br></pre></td></tr></table></figure>

<p> 编辑</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list.d/raspi.list</span><br></pre></td></tr></table></figure>

<p>更改为</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#deb http://archive.raspberrypi.org/debian/ buster main</span><br><span class="line"># Uncomment line below then &#x27;apt-get update&#x27; to enable &#x27;apt-get source&#x27;</span><br><span class="line">#deb-src http://archive.raspberrypi.org/debian/ buster main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ bullseye main</span><br><span class="line"># Uncomment line below then &#x27;apt-get update&#x27; to enable &#x27;apt-get source&#x27;</span><br><span class="line">#deb-src http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ bullseye main</span><br></pre></td></tr></table></figure>

<p>即注释了原有源，修改源为国内的Tsinghua镜像</p>
<p>可用镜像可以查看<a href="https://www.raspbian.org/RaspbianMirrors">https://www.raspbian.org/RaspbianMirrors</a></p>
<p>更新软件源列表 <code>sudo apt-get update</code></p>
<p>更新软件<code>sudo apt-get upgrade</code></p>
<p>参考：</p>
<ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/">Raspbian 镜像使用帮助</a></li>
</ul>
<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p>nginx 可用<code>apt-get</code>命令直接进行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>

<p>安装成功后，默认nginx已启动(重启后依然运行中，说明已经开机自启)，在局域网直接访问树莓派ip，即可看到nginx的欢迎界面</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Welcome to nginx!</span><br><span class="line">If you see this page, the nginx web server is successfully installed and working. Further configuration is required.</span><br><span class="line"></span><br><span class="line">For online documentation and support please refer to nginx.org.</span><br><span class="line">Commercial support is available at nginx.com.</span><br><span class="line"></span><br><span class="line">Thank you for using nginx.</span><br></pre></td></tr></table></figure>

<p><code>nginx -h</code>查看帮助</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">nginx version: nginx/1.14.2</span><br><span class="line">Usage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -?,-h         : this help</span><br><span class="line">  -v            : show version and exit</span><br><span class="line">  -V            : show version and configure options then exit</span><br><span class="line">  -t            : test configuration and exit</span><br><span class="line">  -T            : test configuration, dump it and exit</span><br><span class="line">  -q            : suppress non-error messages during configuration testing</span><br><span class="line">  -s signal     : send signal to a master process: stop, quit, reopen, reload</span><br><span class="line">  -p prefix     : set prefix path (default: /usr/share/nginx/)</span><br><span class="line">  -c filename   : set configuration file (default: /etc/nginx/nginx.conf)</span><br><span class="line">  -g directives : set global directives out of configuration file</span><br></pre></td></tr></table></figure>

<p>这里比较常用的命令是<code>nginx -s [stop, quit, reopen, reload]</code>, 用于启动或停止nginx服务</p>
<p>从帮助文件里可以知道nginx的默认配置文件在<code>/etc/nginx/nginx.conf</code>, 网站文件目录在<code>/var/www/html/</code></p>
<h2 id="播放音频"><a href="#播放音频" class="headerlink" title="播放音频"></a>播放音频</h2><h3 id="1-使用aplay播放"><a href="#1-使用aplay播放" class="headerlink" title="1.使用aplay播放"></a>1.使用aplay播放</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aplay /usr/share/sounds/alsa/Rear_Right.wav</span><br></pre></td></tr></table></figure>

<p>不支持MP3</p>
<h3 id="2-使用omxplayer播放"><a href="#2-使用omxplayer播放" class="headerlink" title="2.使用omxplayer播放"></a>2.使用omxplayer播放</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">omxplayer Taylor\ Swift\ -\ Safe\ And\ Sound.mp3</span><br></pre></td></tr></table></figure>

<p>快捷键</p>
<ul>
<li>左键 - 后退10s</li>
<li>右键 - 前进10s</li>
<li>上键 - 前进10min</li>
<li>下键 - 后退10min</li>
<li>减号 - 降低音量</li>
<li>加号 - 提高音量</li>
</ul>
<h3 id="3-使用音乐播放器moc播放"><a href="#3-使用音乐播放器moc播放" class="headerlink" title="3.使用音乐播放器moc播放"></a>3.使用音乐播放器moc播放</h3><p><code>moc</code>是<code>music on console</code>的意思</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install moc</span><br></pre></td></tr></table></figure>

<p>执行<code>mocp</code>命令即可运行播放器</p>
<img src="/posts/2324bf4a4c14/2020-06-08_230552.gif" class="">

<h2 id="查看系统运行状态"><a href="#查看系统运行状态" class="headerlink" title="查看系统运行状态"></a>查看系统运行状态</h2><h3 id="1-使用top命令"><a href="#1-使用top命令" class="headerlink" title="1.使用top命令"></a>1.使用top命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>

<img src="/posts/2324bf4a4c14/2020-06-09_204651.gif" class="">

<h3 id="2-使用htop命令"><a href="#2-使用htop命令" class="headerlink" title="2.使用htop命令"></a>2.使用htop命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">htop</span><br></pre></td></tr></table></figure>

<img src="/posts/2324bf4a4c14/2020-06-09_204852.gif" class="">

<h2 id="使用ffmpeg命令录制视频"><a href="#使用ffmpeg命令录制视频" class="headerlink" title="使用ffmpeg命令录制视频"></a>使用ffmpeg命令录制视频</h2><p>插上usb摄像头后</p>
<p>执行<code>lsusb</code>查看设备</p>
<img src="/posts/2324bf4a4c14/2020-06-10_223609.gif" class="">

<p>其中的<code>Apple, Inc. Built-in iSight</code>便是usb摄像头</p>
<p>查看ffmpeg官方文档<a href="http://ffmpeg.org/ffmpeg.html#Video-and-Audio-grabbing">这里</a>有说如何获取音频视频到文件</p>
<blockquote>
<p>6.1 Video and Audio grabbing<br>If you specify the input format and device then ffmpeg can grab video and audio directly.</p>
<p><code>ffmpeg -f oss -i /dev/dsp -f video4linux2 -i /dev/video0 /tmp/out.mpg</code><br>Or with an ALSA audio source (mono input, card id 1) instead of OSS:</p>
<p><code>ffmpeg -f alsa -ac 1 -i hw:1 -f video4linux2 -i /dev/video0 /tmp/out.mpg</code><br>Note that you must activate the right video source and channel before launching ffmpeg with any TV viewer such as xawtv by Gerd Knorr. You also have to set the audio recording levels correctly with a standard mixer.</p>
</blockquote>
<p>树莓派上没有录音设备，所以就不录音频，只录视频画面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -f video4linux2 -i /dev/video0 -t 10 out.mpg</span><br></pre></td></tr></table></figure>

<p>录制10s视频并保存到当前目录的out.mpg</p>
<p>这里保存的是mpg格式文件，普通播放器可能无法播放，将其转为常见的mp4格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i out.mpg out.mp4</span><br></pre></td></tr></table></figure>

<h2 id="rtmp服务器推流"><a href="#rtmp服务器推流" class="headerlink" title="rtmp服务器推流"></a>rtmp服务器推流</h2><h3 id="1-rtmp服务"><a href="#1-rtmp服务" class="headerlink" title="1.rtmp服务"></a>1.rtmp服务</h3><p>创建一个文件目录， <code>npm init</code>将该目录初始化一个项目目录</p>
<p>安装<code>node-media-server</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install node-media-server</span><br></pre></td></tr></table></figure>

<p>新建主程序文件<code>vim app.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">NodeMediaServer</span> = <span class="built_in">require</span>(<span class="string">&#x27;node-media-server&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">rtmp</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">1935</span>,</span><br><span class="line">        <span class="attr">chunk_size</span>: <span class="number">60000</span>,</span><br><span class="line">        <span class="attr">gop_cache</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ping</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="attr">ping_timeout</span>: <span class="number">60</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">http</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8000</span>,</span><br><span class="line">        <span class="attr">allow_origin</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nms = <span class="keyword">new</span> <span class="title class_">NodeMediaServer</span>(config)</span><br><span class="line"></span><br><span class="line">nms.<span class="title function_">run</span>()</span><br></pre></td></tr></table></figure>

<p>运行rtmp服务<code>node app.js</code></p>
<img src="/posts/2324bf4a4c14/2020-06-11_233303.gif" class="">

<h3 id="2-前端"><a href="#2-前端" class="headerlink" title="2.前端"></a>2.前端</h3><p>新建<code>index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/flv.js/1.5.0/flv.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;play&quot;</span>&gt;</span>播放<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;pause&quot;</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> videoEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;video&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> playEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;play&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> pauseEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pause&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (flvjs.<span class="title function_">isSupported</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> flvPlayer = flvjs.<span class="title function_">createPlayer</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">type</span>: <span class="string">&#x27;flv&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">url</span>: <span class="string">&#x27;http://192.168.1.2:8000/live/67373.flv&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        flvPlayer.<span class="title function_">attachMediaElement</span>(videoEl);</span></span><br><span class="line"><span class="language-javascript">        flvPlayer.<span class="title function_">load</span>();</span></span><br><span class="line"><span class="language-javascript">        playEl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> flvPlayer.<span class="title function_">play</span>())</span></span><br><span class="line"><span class="language-javascript">        pauseEl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> flvPlayer.<span class="title function_">pause</span>())</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-ffmpeg命令推流"><a href="#3-ffmpeg命令推流" class="headerlink" title="3.ffmpeg命令推流"></a>3.ffmpeg命令推流</h3><h4 id="本地文件推流"><a href="#本地文件推流" class="headerlink" title="本地文件推流"></a>本地文件推流</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -re -i Taylor\ Swift\ -\ Shake\ It\ Off.mp4 -c copy -f flv rtmp://localhost/live/67373</span><br></pre></td></tr></table></figure>

<img src="/posts/2324bf4a4c14/2020-06-11_233524.gif" class="">

<h4 id="摄像头推流"><a href="#摄像头推流" class="headerlink" title="摄像头推流"></a>摄像头推流</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i /dev/video0 -c:v libx264 -preset superfast -tune zerolatency -c:a aac -ar 44100 -f flv rtmp://localhost/live/67373</span><br></pre></td></tr></table></figure>

<p>但是有很高的延迟，不知为什么</p>
<h2 id="连接蓝牙音箱"><a href="#连接蓝牙音箱" class="headerlink" title="连接蓝牙音箱"></a>连接蓝牙音箱</h2><p>使用<code>bluetoothctl</code>进入蓝牙</p>
<img src="/posts/2324bf4a4c14/2020-06-14_113226.gif" class="">

<p><code>list</code>用来列出蓝牙设备<br><code>show</code>用来展示蓝牙设备信息</p>
<p>启用蓝牙<code>power on</code></p>
<img src="/posts/2324bf4a4c14/2020-06-14_113807.gif" class="">

<p>扫描蓝牙<code>scan on</code></p>
<p>查看扫描到蓝牙设备<code>devices</code></p>
<img src="/posts/2324bf4a4c14/2020-06-14_115137.gif" class="">

<p>信任设备<code>trust</code>（下次系统重启会自动进行连接）</p>
<img src="/posts/2324bf4a4c14/2020-06-14_120113.gif" class="">

<p>配对<code>pair</code></p>
<img src="/posts/2324bf4a4c14/2020-06-14_120227.gif" class="">

<p>连接<code>connect</code></p>
<img src="/posts/2324bf4a4c14/2020-06-14_120308.gif" class="">

<p><code>exit</code>退出蓝牙界面</p>
<p>播放音频测试蓝颜音箱</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aplay /usr/share/sounds/alsa/Rear_Right.wav</span><br></pre></td></tr></table></figure>

<p>发现还是只是在耳机输出，蓝牙音箱没有输出声音</p>
<p>这时需要添加配置文件<code>~/.asoundrc</code>, 这是文件是用来指定声音输出的（类似于图形界面选择声音输出至蓝牙）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.asoundrc</span><br></pre></td></tr></table></figure>

<p>编辑该文件，没有则新建</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">pcm.!default &#123;</span><br><span class="line">        type asym</span><br><span class="line">        playback.pcm &#123;</span><br><span class="line">                type plug</span><br><span class="line">                slave.pcm &quot;output&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        capture.pcm &#123;</span><br><span class="line">                type plug</span><br><span class="line">                slave.pcm &quot;input&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcm.output &#123;</span><br><span class="line">        type bluealsa</span><br><span class="line">        device &quot;50:D2:F5:5C:00:26&quot;</span><br><span class="line">        profile &quot;a2dp&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctl.!default &#123;</span><br><span class="line">        type bluealsa</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcm.input &#123;</span><br><span class="line">        type bluealsa</span><br><span class="line">        device &quot;50:D2:F5:5C:00:26&quot;</span><br><span class="line">        profile &quot;sco&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>output - 音频输出<br>input - 音频输入（麦克风）</p>
<p>这里”30:21:D0:3E:1F:C1”是音箱mac地址</p>
<p>保存后重新播放，便可以将蓝牙音箱作为默认音频输出</p>
<p>注意：这样配置，mocp播放器不能正常播放（可能不能正确识别树莓派下音频配置，推荐这种情况下使用树莓派自带的<code>vlc media player</code>作为音乐播放器）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vlc -I ncurses</span><br></pre></td></tr></table></figure>

<img src="/posts/2324bf4a4c14/2020-06-14_232405.gif" class="">

<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vlc ~/Music</span><br></pre></td></tr></table></figure>

<p>添加指定目录到播放列表</p>
<p>在未进行蓝牙扫描时，<code>paired-devices</code>命令可以用来查看已配对设备</p>
<p><code>remove</code>命令可以用来指定移除指定设备的配对</p>
<p><code>disconnect</code>用于断开当前蓝牙连接</p>
<img src="/posts/2324bf4a4c14/2020-06-14_083950.gif" class="">

<h2 id="查看CPU温度"><a href="#查看CPU温度" class="headerlink" title="查看CPU温度"></a>查看CPU温度</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /sys/class/thermal/thermal_zone0/temp</span><br></pre></td></tr></table></figure>

<p>所得值除以1000可以得到摄氏度单位值</p>
<img src="/posts/2324bf4a4c14/2020-06-16_212327.gif" class="">

<p>也可以使用<code>watch</code>命令，刷新温度值，默认每两秒执行一次</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch <span class="built_in">cat</span> /sys/class/thermal/thermal_zone0/temp</span><br></pre></td></tr></table></figure>

<img src="/posts/2324bf4a4c14/2020-06-16_212227.gif" class="">

<h2 id="设置静态ip"><a href="#设置静态ip" class="headerlink" title="设置静态ip"></a>设置静态ip</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/dhcpcd.conf</span><br></pre></td></tr></table></figure>

<p>修改相应部分为</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Example static IP configuration:</span><br><span class="line">interface eth0</span><br><span class="line">static ip_address=192.168.1.4/24</span><br><span class="line">#static ip6_address=fd51:42f8:caae:d92e::ff/64</span><br><span class="line">static routers=192.168.1.1</span><br><span class="line">#static domain_name_servers=192.168.0.1 8.8.8.8 fd51:42f8:caae:d92e::1</span><br></pre></td></tr></table></figure>

<p>wifi 下类似 interface 为 wlan0</p>
<p>重启生效</p>
<h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/hostname</span><br><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p>修改其中的主机名，重启生效</p>
<h2 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h2><p>查看磁盘分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure>

<img src="/posts/2324bf4a4c14/2020-08-02_152545.png" class="">

<p>挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mount /dev/sda1 /media</span><br></pre></td></tr></table></figure>

<p>开机自动挂载</p>
<p>编辑</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure>

<p>添加一行</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/dev/sda1       /media          ntfs    defaults,noatime        0       0</span><br></pre></td></tr></table></figure>

<p>重启</p>
<p>查看<code>df -lh</code></p>
<img src="/posts/2324bf4a4c14/2020-08-02_165347.png" class="">

<h2 id="安装samba服务"><a href="#安装samba服务" class="headerlink" title="安装samba服务"></a>安装samba服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install samba</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>

<p>在配置文件中添加</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[share]</span><br><span class="line">    path = /media</span><br><span class="line">    public = yes</span><br><span class="line">    writable = yes</span><br><span class="line">    browsable = yes</span><br></pre></td></tr></table></figure>

<p>访问 <code>\\192.168.1.4</code></p>
<p>如何添加用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo smbpasswd -a pi</span><br></pre></td></tr></table></figure>

<p>这将添加pi用户，注意密码不要与pi用户密码设一样，另设密码</p>
<p>如果在Windows上登录过后，如何清除用户登录状态</p>
<p>在cmd命令行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net use</span><br><span class="line">net use \\192.168.1.4\raspi4-private /delete</span><br></pre></td></tr></table></figure>

<img src="/posts/2324bf4a4c14/2020-08-01_225748.png" class="">

<p>上传文件速度在30M&#x2F;s，下载速度105M&#x2F;s,有线网络连接的情况下</p>
<h2 id="磁盘读写速度测试"><a href="#磁盘读写速度测试" class="headerlink" title="磁盘读写速度测试"></a>磁盘读写速度测试</h2><p>读取速度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install hdparm</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo hdparm -t /dev/sda1</span><br><span class="line">sudo hdparm -T /dev/sda1</span><br></pre></td></tr></table></figure>

<p>显示</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/dev/sda1:</span><br><span class="line"> Timing buffered disk reads: 276 MB in  3.01 seconds =  91.81 MB/sec</span><br><span class="line"></span><br><span class="line">/dev/sda1:</span><br><span class="line"> Timing cached reads:   1532 MB in  2.00 seconds = 766.63 MB/sec</span><br></pre></td></tr></table></figure>

<p>写入速度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dd if=/dev/zero of=/media/testw.dbf bs=512M count=1</span><br></pre></td></tr></table></figure>

<p>回显</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">记录了1+0 的读入</span><br><span class="line">记录了1+0 的写出</span><br><span class="line">536870912 bytes (537 MB, 512 MiB) copied, 17.697 s, 30.3 MB/s</span><br></pre></td></tr></table></figure>

<h2 id="如何关闭usb电源输出"><a href="#如何关闭usb电源输出" class="headerlink" title="如何关闭usb电源输出"></a>如何关闭usb电源输出</h2><p>安装uhubctl</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libusb-1.0-0-dev</span><br><span class="line">git clone https://github.com/mvp/uhubctl</span><br><span class="line">cd uhubctl</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>pi4 需要uhubctl 2.4以上</p>
<p>查看usb电源状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo uhubctl</span><br></pre></td></tr></table></figure>

<p>关闭电源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo uhubctl -l 1-1 -a 0</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派禁止休眠、保持屏幕常亮</title>
    <url>/posts/9832c248a2df/</url>
    <content><![CDATA[<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/lightdm/lightdm.conf</span><br></pre></td></tr></table></figure>

<p>找到<br><code>#xserver-command=X</code><br>修改为<br><code>xserver-command=X -s 0 -dpms</code></p>
<p>保存后重启即可</p>
<p>参考文章</p>
<ul>
<li><a href="https://blog.csdn.net/u011720560/article/details/78288128">树莓派禁止休眠、屏幕常亮</a></li>
</ul>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派鼠标空闲时隐藏光标</title>
    <url>/posts/6f18ead3ddd8/</url>
    <content><![CDATA[<h2 id="安装uncluter"><a href="#安装uncluter" class="headerlink" title="安装uncluter"></a>安装uncluter</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install unclutter</span><br></pre></td></tr></table></figure>

<p>安装后，默认鼠标空闲2s后就会被隐藏</p>
<p>参考文章:</p>
<ul>
<li><a href="https://debaday.debian.net/2007/03/27/unclutter-hide-the-mouse-cursor-after-a-period-of-inactivity/">unclutter: hide the mouse cursor after a period of inactivity</a></li>
<li><a href="https://ubuntu-tutorials.com/2008/07/07/auto-hide-your-mouse-pointer-when-idle-with-unclutter/">Auto-Hide Your Mouse Pointer When Idle With “Unclutter”</a></li>
</ul>
]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派搭建LAMP服务</title>
    <url>/posts/32217327e163/</url>
    <content><![CDATA[<h2 id="LAMP的含义"><a href="#LAMP的含义" class="headerlink" title="LAMP的含义"></a>LAMP的含义</h2><p>Linux - 操作系统</p>
<p>Apache - web服务器软件</p>
<p>MySQL - 数据库</p>
<p>PHP - 使用语言</p>
<h2 id="安装LAMP"><a href="#安装LAMP" class="headerlink" title="安装LAMP"></a>安装LAMP</h2><p>更新软件列表</p>
<p><code>sudo apt-get update</code></p>
<p>升级软件</p>
<p><code>sudo apt-get upgrade</code></p>
<p>安装Apache</p>
<p><code>sudo apt-get install apache2</code></p>
<p>输入 y 回车 继续即可</p>
<p>安装MySQL</p>
<p><code>sudo apt-get install mysql-server</code></p>
<p>输入 y 回车 继续即可</p>
<p>(<strong>注</strong>：在安装数据库MySQL过程中并没有提示设置root密码，此时密码为空，可能与我之前为启用树莓派的root账户有关)</p>
<p>安装PHP </p>
<p><code>sudo apt-get install php</code></p>
<p>输入 y 回车 继续即可</p>
<p>安装PHP访问MySQL所需要的库</p>
<p><code>sudo apt-get install php-mysql</code></p>
<p>输入 y 回车 继续即可</p>
<h2 id="查看web站点"><a href="#查看web站点" class="headerlink" title="查看web站点"></a>查看web站点</h2><p>在浏览器内输入树莓派局域网IP，可以看到Apache的默认页面</p>
<img src="/posts/32217327e163/2018-03-11-192347_830x386_scrot.png" class="">]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次使用hexo</title>
    <url>/posts/95766e5c7a2f/</url>
    <content><![CDATA[<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>全局安装hexo命令行工具<br><code>npm install hexo-cli -g</code></p>
<p>初始化一个hexo项目，我们取名为blog，这会创建一个blog项目文件夹<br><code>hexo init blog</code></p>
<p>切换到项目目录<br><code>cd blog</code></p>
<p>安装项目依赖<br><code>npm intall</code></p>
<p>这时我们就可以启动本地服务，在本机查看我们的站点<br><code>hexo server</code></p>
<h2 id="先写个文章试试吧"><a href="#先写个文章试试吧" class="headerlink" title="先写个文章试试吧"></a>先写个文章试试吧</h2><p>比如我要写一篇文章叫 “第一次使用hexo”，可以这样<br><code>hexo new &#39;第一次使用hexo&#39;</code></p>
<p>创建好新文章后，我们可以在项目的<code>source</code>下的<code>_posts</code>文件夹下看到新建的post文件<code>第一次使用hexo.md</code>,为Markdown文件</p>
<p>这时我们就可以用markdown语法写文章了，写完保存后，我们需要将Markdown文件生成静态的html文件<br><code>hexo g</code></p>
<p>静态文件生成后，我们就可以运行我们的服务，在站点上查看我们刚刚写的文章啦。注意，hexo是支持热重载的，所以我们添加内容保存后，直接刷新我们的站点页面，就可以直接查看到我们刚刚添加的文章内容，不需要重启服务<br><code>hexo server</code></p>
<p>以上就是hexo最基本的操作了，如果你只在意文章内容，不在意外观，其实已经可以满足你的需求了。当然，hexo还有更多的功能，具体可见hexo官方文档 <a href="https://hexo.io/">https://hexo.io/</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>管理富文本编辑器里上传的文件</title>
    <url>/posts/7ce395675d7c/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>富文本编辑器会提供插入图片或视频的功能，该功能一般情况时执行插入操作时上传相关文件，由服务器返回静态文件的url地址，前端通过插入img或是video标签，并将返回的url赋予src属性，这样就可以在前端看到我们插入的文件了，但是用户可能会插入新的文件或是删除已插入的文件，但是在前端我们只是删除img或是video标签，服务器上该资源的文件还是存在的，并没有被清除，事实上此时用户没有提交，我们也不能直接进行删除，毕竟用户还可能执行撤销操作，如果直接删除了服务器资源，就会导致文件资源404，找不到该资源，又要重新上传，用户体验太差。</p>
<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><blockquote>
<p>前端提供需要清除文件的地址数组</p>
</blockquote>
<p>用户打开富文本编辑器，这可能是新建的或是对已有的内容进行编辑，我们可以初始化一个数组<code>let uploads = []</code>,如果是编辑操作，我们先通过<code>querySelectorAll(&#39;[src]&#39;)</code>得到文件相应的 dom 数组，后面进行遍历，将每一项的src值push到uploads数组里，这样我们就得到了以前上传并使用中的文件列表；在后续的上传操作中，每次上传我们都会将文件地址push到uploads数组里；当用户进行提交操作时，我们可以遍历出内容中所有的file并push到 <code>let files = []</code>数组中。</p>
<p>此时我们得到了两个数组，一个是 <code>uploads</code> 上传文件的数组，另一个是 <code>files</code> 内容中有效的文件数组，那取其差集，就是我们要清除的无用文件的数组 <code>useless</code>了，将该数组传到服务器，就可以清除相关的无用文件了。</p>
<blockquote>
<p>这里有个小问题，如何取两个数组差集的问题，可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> uploads = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> files = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> useless = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;files.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = uploads.<span class="title function_">indexOf</span>(files[i])</span><br><span class="line">  uploads.<span class="title function_">splice</span>(index,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">useless = uploads</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`useless: <span class="subst">$&#123;useless&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>这种实现由什么缺陷呢：整体上看，这种实现确实了我们的预期功能，并且后台也很简单，只需提供一个可以接收删除文件数组的接口，并执行删除就可以了；现实其实后台并没有这么简单，删除操作一般是危险的，需要我们警惕的，如果该实现上传到服务器的文件并没有进行数据库记录，只是放置在 <code>static/uploads/</code> 的目录下，那就没有办法设置谁由权限删除某一个文件，也就是说只要提供删除数组，所有的可以操作编辑器的用户都可以进行删除操作，显然这是有安全问题的，所以对上传的文件一定要做数据库记录，并设置所有者，执行删除操作时也需要判断操作是否来自所有者。</p>
<p>既然上述存在的问题必须通过添加数据库记录来解决，那我们可以将上传的文件绑定到指定的内容id；对于新创建的内容，新上传的文件记录的内容id为null，当我们提交编辑器内容时，我们将files各记录的内容id设置为实际值；如果是编辑已有的内容，我们此时已有该内容的id，将该内容id下的所有文件记录的内容id设置为null，我们将files里的指定为该内容id，之后我们可以定期清理内容id为null的文件，即可清除无用的上传文件，这有点类似于js中内存垃圾清理实现方式之一的引用计数。</p>
<table>
<thead>
<tr>
<th>id</th>
<th>article_id</th>
<th>file_url</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>null</td>
<td>‘<a href="http://domain.com/pic.jpg&#39;">http://domain.com/pic.jpg&#39;</a></td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>‘<a href="http://domain.com/pic.jpg&#39;">http://domain.com/pic.jpg&#39;</a></td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>‘<a href="http://domain.com/pic.jpg&#39;">http://domain.com/pic.jpg&#39;</a></td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>‘<a href="http://domain.com/pic.jpg&#39;">http://domain.com/pic.jpg&#39;</a></td>
</tr>
<tr>
<td>4</td>
<td>1</td>
<td>‘<a href="http://domain.com/pic.jpg&#39;">http://domain.com/pic.jpg&#39;</a></td>
</tr>
<tr>
<td>5</td>
<td>1</td>
<td>‘<a href="http://domain.com/pic.jpg&#39;">http://domain.com/pic.jpg&#39;</a></td>
</tr>
</tbody></table>
]]></content>
  </entry>
</search>
